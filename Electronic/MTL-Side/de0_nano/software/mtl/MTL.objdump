
MTL.elf:     file format elf32-littlenios2
MTL.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002328 memsz 0x00002328 flags r-x
    LOAD off    0x00003348 vaddr 0x0000a348 paddr 0x0000a628 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x00003908 vaddr 0x0000a908 paddr 0x0000a908 align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002134  000081bc  000081bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000058  0000a2f0  0000a2f0  000032f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  0000a348  0000a628  00003348  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  0000a908  0000a908  00003908  2**2
                  ALLOC, SMALL_DATA
  6 .mem          00000000  0000aa24  0000aa24  00003628  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003628  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000590  00000000  00000000  00003650  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000788d  00000000  00000000  00003be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000029fd  00000000  00000000  0000b46d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002d14  00000000  00000000  0000de6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000ae4  00000000  00000000  00010b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000173f  00000000  00000000  00011664  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000104f  00000000  00000000  00012da3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00013df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000158  00000000  00000000  00013e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000158ed  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000158f0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000158f3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000158f4  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000158f5  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000158fe  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00015907  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  00015910  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000034  00000000  00000000  00015918  2**0
                  CONTENTS, READONLY
 26 .jdi          00004b86  00000000  00000000  0001594c  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00040a22  00000000  00000000  0001a4d2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
000081bc l    d  .text	00000000 .text
0000a2f0 l    d  .rodata	00000000 .rodata
0000a348 l    d  .rwdata	00000000 .rwdata
0000a908 l    d  .bss	00000000 .bss
0000aa24 l    d  .mem	00000000 .mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../MTL_bsp//obj/HAL/src/crt0.o
00008204 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00008094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008420 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000a348 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008af8 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_load.c
00008c24 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00008d70 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00008eb8 l     F .text	00000038 alt_dev_reg
0000a428 l     O .rwdata	0000002c JTAG_UART
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000091a4 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
000092a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009404 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009430 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00009824 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000995c l     F .text	00000050 alt_get_errno
000099ac l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00008d08 g     F .text	00000068 alt_main
00008370 g     F .text	00000080 _puts_r
0000a924 g     O .bss	00000100 alt_irq
0000a628 g       *ABS*	00000000 __flash_rwdata_start
00008324 g     F .text	0000004c printf
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000a908 g     O .bss	00000004 errno
0000a910 g     O .bss	00000004 alt_argv
000125fc g       *ABS*	00000000 _gp
0000a47c g     O .rwdata	00000180 alt_fd_list
00008208 g     F .text	00000064 translateTouchData
00009dec g     F .text	00000090 alt_find_dev
000098e4 g     F .text	00000078 alt_io_redirect
000083f0 g     F .text	00000014 puts
0000902c g     F .text	000000e4 altera_avalon_jtag_uart_read
000082e8 g     F .text	0000003c _printf_r
00008c14 g     F .text	00000008 .hidden __udivsi3
0000a044 g     F .text	0000008c alt_icache_flush
0000a614 g     O .rwdata	00000004 alt_max_fd
0000a5fc g     O .rwdata	00000004 _global_impure_ptr
0000aa24 g       *ABS*	00000000 __bss_end
00009734 g     F .text	000000f0 alt_iic_isr_register
00009cc8 g     F .text	00000104 alt_tick
000096e8 g     F .text	0000004c alt_ic_irq_enabled
00008000 g       *ABS*	00000000 __alt_mem_mem
00009c30 g     F .text	00000098 alt_alarm_stop
0000a918 g     O .bss	00000004 alt_irq_active
000080ec g     F .exceptions	000000d0 alt_irq_handler
0000a454 g     O .rwdata	00000028 alt_dev_null
000093c0 g     F .text	00000044 alt_dcache_flush_all
0000a628 g       *ABS*	00000000 __ram_rwdata_end
0000a60c g     O .rwdata	00000008 alt_dev_list
00008dc0 g     F .text	000000f8 write
0000a348 g       *ABS*	00000000 __ram_rodata_end
00008c1c g     F .text	00000008 .hidden __umodsi3
0000aa24 g       *ABS*	00000000 end
0000ce20 g       *ABS*	00000000 __alt_stack_pointer
00009218 g     F .text	00000088 alt_avalon_timer_sc_init
00009110 g     F .text	00000094 altera_avalon_jtag_uart_write
0000848c g     F .text	00000544 ___vfprintf_internal_r
0000a120 g     F .text	0000019c __call_exitprocs
000081bc g     F .text	0000004c _start
0000a91c g     O .bss	00000004 _alt_tick_rate
0000a920 g     O .bss	00000004 _alt_nticks
00008f24 g     F .text	00000048 alt_sys_init
0000a348 g       *ABS*	00000000 __ram_rwdata_start
0000a2f0 g       *ABS*	00000000 __ram_rodata_start
00008f6c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00009f90 g     F .text	000000b4 alt_get_fd
0000a0f0 g     F .text	00000030 memcmp
0000aa24 g       *ABS*	00000000 __alt_stack_base
00009e7c g     F .text	00000114 alt_find_file
00009480 g     F .text	000000a4 alt_dev_llist_insert
000089f4 g     F .text	000000ac __sfvwrite_small_dev
0000a908 g       *ABS*	00000000 __bss_start
0000826c g     F .text	0000007c main
0000a914 g     O .bss	00000004 alt_envp
00008fcc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a618 g     O .rwdata	00000004 alt_errno
00008b64 g     F .text	00000054 .hidden __divsi3
0000a2f0 g       *ABS*	00000000 __flash_rodata_start
00008ef0 g     F .text	00000034 alt_irq_init
00009bd0 g     F .text	00000060 alt_release_fd
00008aa0 g     F .text	00000058 _write_r
0000a600 g     O .rwdata	00000004 _impure_ptr
0000a90c g     O .bss	00000004 alt_argc
00008020 g       .exceptions	00000000 alt_irq_entry
0000a604 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009554 g     F .text	00000050 alt_ic_isr_register
0000a628 g       *ABS*	00000000 _edata
0000aa24 g       *ABS*	00000000 _end
000081bc g       *ABS*	00000000 __ram_exceptions_end
00009644 g     F .text	000000a4 alt_ic_irq_disable
00009dcc g     F .text	00000020 altera_nios2_qsys_irq_init
0000a0d0 g     F .text	00000020 exit
00008bb8 g     F .text	0000005c .hidden __modsi3
0000ce20 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000a2bc g     F .text	00000034 _exit
00008404 g     F .text	0000001c strlen
00009a78 g     F .text	00000158 open
00009524 g     F .text	00000030 alt_icache_flush_all
0000a61c g     O .rwdata	00000004 alt_priority_mask
000095a4 g     F .text	000000a0 alt_ic_irq_enable
000089d0 g     F .text	00000024 __vfprintf_internal
0000a620 g     O .rwdata	00000008 alt_alarm_list
000092f0 g     F .text	000000d0 close
00008c88 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <_gp+0xffff5a08>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08606f14 	ori	at,at,33212
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__alt_mem_mem-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)

00008094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    80fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8100:	0005313a 	rdctl	r2,ipending
    8104:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    810c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8114:	00800044 	movi	r2,1
    8118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    811c:	e0fffb17 	ldw	r3,-20(fp)
    8120:	e0bffc17 	ldw	r2,-16(fp)
    8124:	1884703a 	and	r2,r3,r2
    8128:	10001426 	beq	r2,zero,817c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    812c:	00800074 	movhi	r2,1
    8130:	10aa4904 	addi	r2,r2,-22236
    8134:	e0fffd17 	ldw	r3,-12(fp)
    8138:	180690fa 	slli	r3,r3,3
    813c:	10c5883a 	add	r2,r2,r3
    8140:	10c00017 	ldw	r3,0(r2)
    8144:	00800074 	movhi	r2,1
    8148:	10aa4904 	addi	r2,r2,-22236
    814c:	e13ffd17 	ldw	r4,-12(fp)
    8150:	200890fa 	slli	r4,r4,3
    8154:	1105883a 	add	r2,r2,r4
    8158:	10800104 	addi	r2,r2,4
    815c:	10800017 	ldw	r2,0(r2)
    8160:	1009883a 	mov	r4,r2
    8164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    816c:	0005313a 	rdctl	r2,ipending
    8170:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8174:	e0bfff17 	ldw	r2,-4(fp)
    8178:	00000706 	br	8198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    817c:	e0bffc17 	ldw	r2,-16(fp)
    8180:	1085883a 	add	r2,r2,r2
    8184:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8188:	e0bffd17 	ldw	r2,-12(fp)
    818c:	10800044 	addi	r2,r2,1
    8190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    8194:	003fe106 	br	811c <_gp+0xffff5b20>

    active = alt_irq_pending ();
    8198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    819c:	e0bffb17 	ldw	r2,-20(fp)
    81a0:	103fdb1e 	bne	r2,zero,8110 <_gp+0xffff5b14>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81a4:	0001883a 	nop
}
    81a8:	e037883a 	mov	sp,fp
    81ac:	dfc00117 	ldw	ra,4(sp)
    81b0:	df000017 	ldw	fp,0(sp)
    81b4:	dec00204 	addi	sp,sp,8
    81b8:	f800283a 	ret

Disassembly of section .text:

000081bc <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    81bc:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    81c0:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    81c4:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    81c8:	00bffd16 	blt	zero,r2,81c0 <_gp+0xffff5bc4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81cc:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    81d0:	def38814 	ori	sp,sp,52768
    movhi gp, %hi(_gp)
    81d4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81d8:	d6897f14 	ori	gp,gp,9724
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81dc:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81e0:	10aa4214 	ori	r2,r2,43272

    movhi r3, %hi(__bss_end)
    81e4:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81e8:	18ea8914 	ori	r3,r3,43556

    beq r2, r3, 1f
    81ec:	10c00326 	beq	r2,r3,81fc <_start+0x40>

0:
    stw zero, (r2)
    81f0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81f4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81f8:	10fffd36 	bltu	r2,r3,81f0 <_gp+0xffff5bf4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81fc:	0008c880 	call	8c88 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8200:	0008d080 	call	8d08 <alt_main>

00008204 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8204:	003fff06 	br	8204 <_gp+0xffff5c08>

00008208 <translateTouchData>:
#include "system.h"
#include "terasic_lib/terasic_includes.h"

// translates touch data to x,y and isTouched signals
void translateTouchData(int touchData, int* x, int* y, int* isTouched)
{
    8208:	defffb04 	addi	sp,sp,-20
    820c:	df000415 	stw	fp,16(sp)
    8210:	df000404 	addi	fp,sp,16
    8214:	e13ffc15 	stw	r4,-16(fp)
    8218:	e17ffd15 	stw	r5,-12(fp)
    821c:	e1bffe15 	stw	r6,-8(fp)
    8220:	e1ffff15 	stw	r7,-4(fp)
	*isTouched = touchData & 0x0001;
    8224:	e0bffc17 	ldw	r2,-16(fp)
    8228:	10c0004c 	andi	r3,r2,1
    822c:	e0bfff17 	ldw	r2,-4(fp)
    8230:	10c00015 	stw	r3,0(r2)
	*y = (touchData>>1) & 0x01FF; // take 9 bits
    8234:	e0bffc17 	ldw	r2,-16(fp)
    8238:	1005d07a 	srai	r2,r2,1
    823c:	10c07fcc 	andi	r3,r2,511
    8240:	e0bffe17 	ldw	r2,-8(fp)
    8244:	10c00015 	stw	r3,0(r2)
	*x = (touchData>>10) & 0x03FF; // take 10 bits
    8248:	e0bffc17 	ldw	r2,-16(fp)
    824c:	1005d2ba 	srai	r2,r2,10
    8250:	10c0ffcc 	andi	r3,r2,1023
    8254:	e0bffd17 	ldw	r2,-12(fp)
    8258:	10c00015 	stw	r3,0(r2)
}
    825c:	e037883a 	mov	sp,fp
    8260:	df000017 	ldw	fp,0(sp)
    8264:	dec00104 	addi	sp,sp,4
    8268:	f800283a 	ret

0000826c <main>:

int main()
{
    826c:	defffa04 	addi	sp,sp,-24
    8270:	dfc00515 	stw	ra,20(sp)
    8274:	df000415 	stw	fp,16(sp)
    8278:	df000404 	addi	fp,sp,16
	int test,x,y,isTouched;
	printf("Hello from MTL side!\n");
    827c:	01000074 	movhi	r4,1
    8280:	2128bc04 	addi	r4,r4,-23824
    8284:	00083f00 	call	83f0 <puts>

	IOWR(TESTLED_BASE, 0x0, 0x3);
    8288:	00c000c4 	movi	r3,3
    828c:	00800074 	movhi	r2,1
    8290:	10840804 	addi	r2,r2,4128
    8294:	10c00035 	stwio	r3,0(r2)

	while(1)
	{
		test = IORD(TOUCHDATA_BASE, 0x0);
    8298:	0005883a 	mov	r2,zero
    829c:	10800037 	ldwio	r2,0(r2)
    82a0:	e0bffc15 	stw	r2,-16(fp)
		translateTouchData(test, &x, &y, &isTouched);
    82a4:	e17ffd04 	addi	r5,fp,-12
    82a8:	e0fffe04 	addi	r3,fp,-8
    82ac:	e0bfff04 	addi	r2,fp,-4
    82b0:	e13ffc17 	ldw	r4,-16(fp)
    82b4:	180d883a 	mov	r6,r3
    82b8:	100f883a 	mov	r7,r2
    82bc:	00082080 	call	8208 <translateTouchData>
		if(isTouched)
    82c0:	e0bfff17 	ldw	r2,-4(fp)
    82c4:	10000726 	beq	r2,zero,82e4 <main+0x78>
			printf("Lol : (%d,%d)\n",x,y);
    82c8:	e0fffd17 	ldw	r3,-12(fp)
    82cc:	e0bffe17 	ldw	r2,-8(fp)
    82d0:	01000074 	movhi	r4,1
    82d4:	2128c204 	addi	r4,r4,-23800
    82d8:	180b883a 	mov	r5,r3
    82dc:	100d883a 	mov	r6,r2
    82e0:	00083240 	call	8324 <printf>
	}
    82e4:	003fec06 	br	8298 <_gp+0xffff5c9c>

000082e8 <_printf_r>:
    82e8:	defffd04 	addi	sp,sp,-12
    82ec:	dfc00015 	stw	ra,0(sp)
    82f0:	d9800115 	stw	r6,4(sp)
    82f4:	d9c00215 	stw	r7,8(sp)
    82f8:	20c00217 	ldw	r3,8(r4)
    82fc:	280d883a 	mov	r6,r5
    8300:	01400074 	movhi	r5,1
    8304:	29627d04 	addi	r5,r5,-30220
    8308:	19400115 	stw	r5,4(r3)
    830c:	21400217 	ldw	r5,8(r4)
    8310:	d9c00104 	addi	r7,sp,4
    8314:	000848c0 	call	848c <___vfprintf_internal_r>
    8318:	dfc00017 	ldw	ra,0(sp)
    831c:	dec00304 	addi	sp,sp,12
    8320:	f800283a 	ret

00008324 <printf>:
    8324:	defffc04 	addi	sp,sp,-16
    8328:	dfc00015 	stw	ra,0(sp)
    832c:	d9400115 	stw	r5,4(sp)
    8330:	d9800215 	stw	r6,8(sp)
    8334:	d9c00315 	stw	r7,12(sp)
    8338:	00800074 	movhi	r2,1
    833c:	10a98004 	addi	r2,r2,-23040
    8340:	10800017 	ldw	r2,0(r2)
    8344:	200b883a 	mov	r5,r4
    8348:	01000074 	movhi	r4,1
    834c:	10c00217 	ldw	r3,8(r2)
    8350:	21227d04 	addi	r4,r4,-30220
    8354:	d9800104 	addi	r6,sp,4
    8358:	19000115 	stw	r4,4(r3)
    835c:	11000217 	ldw	r4,8(r2)
    8360:	00089d00 	call	89d0 <__vfprintf_internal>
    8364:	dfc00017 	ldw	ra,0(sp)
    8368:	dec00404 	addi	sp,sp,16
    836c:	f800283a 	ret

00008370 <_puts_r>:
    8370:	defffd04 	addi	sp,sp,-12
    8374:	dc000015 	stw	r16,0(sp)
    8378:	2021883a 	mov	r16,r4
    837c:	2809883a 	mov	r4,r5
    8380:	dfc00215 	stw	ra,8(sp)
    8384:	dc400115 	stw	r17,4(sp)
    8388:	2823883a 	mov	r17,r5
    838c:	00084040 	call	8404 <strlen>
    8390:	81400217 	ldw	r5,8(r16)
    8394:	00c00074 	movhi	r3,1
    8398:	18e27d04 	addi	r3,r3,-30220
    839c:	28c00115 	stw	r3,4(r5)
    83a0:	8009883a 	mov	r4,r16
    83a4:	880d883a 	mov	r6,r17
    83a8:	100f883a 	mov	r7,r2
    83ac:	00089f40 	call	89f4 <__sfvwrite_small_dev>
    83b0:	00ffffc4 	movi	r3,-1
    83b4:	10c00926 	beq	r2,r3,83dc <_puts_r+0x6c>
    83b8:	81400217 	ldw	r5,8(r16)
    83bc:	01800074 	movhi	r6,1
    83c0:	8009883a 	mov	r4,r16
    83c4:	28800117 	ldw	r2,4(r5)
    83c8:	31a8c604 	addi	r6,r6,-23784
    83cc:	01c00044 	movi	r7,1
    83d0:	103ee83a 	callr	r2
    83d4:	10bfffe0 	cmpeqi	r2,r2,-1
    83d8:	0085c83a 	sub	r2,zero,r2
    83dc:	dfc00217 	ldw	ra,8(sp)
    83e0:	dc400117 	ldw	r17,4(sp)
    83e4:	dc000017 	ldw	r16,0(sp)
    83e8:	dec00304 	addi	sp,sp,12
    83ec:	f800283a 	ret

000083f0 <puts>:
    83f0:	00800074 	movhi	r2,1
    83f4:	10a98004 	addi	r2,r2,-23040
    83f8:	200b883a 	mov	r5,r4
    83fc:	11000017 	ldw	r4,0(r2)
    8400:	00083701 	jmpi	8370 <_puts_r>

00008404 <strlen>:
    8404:	2005883a 	mov	r2,r4
    8408:	10c00007 	ldb	r3,0(r2)
    840c:	18000226 	beq	r3,zero,8418 <strlen+0x14>
    8410:	10800044 	addi	r2,r2,1
    8414:	003ffc06 	br	8408 <_gp+0xffff5e0c>
    8418:	1105c83a 	sub	r2,r2,r4
    841c:	f800283a 	ret

00008420 <print_repeat>:
    8420:	defffb04 	addi	sp,sp,-20
    8424:	dc800315 	stw	r18,12(sp)
    8428:	dc400215 	stw	r17,8(sp)
    842c:	dc000115 	stw	r16,4(sp)
    8430:	dfc00415 	stw	ra,16(sp)
    8434:	2025883a 	mov	r18,r4
    8438:	2823883a 	mov	r17,r5
    843c:	d9800005 	stb	r6,0(sp)
    8440:	3821883a 	mov	r16,r7
    8444:	04000a0e 	bge	zero,r16,8470 <print_repeat+0x50>
    8448:	88800117 	ldw	r2,4(r17)
    844c:	9009883a 	mov	r4,r18
    8450:	880b883a 	mov	r5,r17
    8454:	d80d883a 	mov	r6,sp
    8458:	01c00044 	movi	r7,1
    845c:	103ee83a 	callr	r2
    8460:	843fffc4 	addi	r16,r16,-1
    8464:	103ff726 	beq	r2,zero,8444 <_gp+0xffff5e48>
    8468:	00bfffc4 	movi	r2,-1
    846c:	00000106 	br	8474 <print_repeat+0x54>
    8470:	0005883a 	mov	r2,zero
    8474:	dfc00417 	ldw	ra,16(sp)
    8478:	dc800317 	ldw	r18,12(sp)
    847c:	dc400217 	ldw	r17,8(sp)
    8480:	dc000117 	ldw	r16,4(sp)
    8484:	dec00504 	addi	sp,sp,20
    8488:	f800283a 	ret

0000848c <___vfprintf_internal_r>:
    848c:	deffe404 	addi	sp,sp,-112
    8490:	d8c00804 	addi	r3,sp,32
    8494:	df001a15 	stw	fp,104(sp)
    8498:	ddc01915 	stw	r23,100(sp)
    849c:	dd801815 	stw	r22,96(sp)
    84a0:	dd401715 	stw	r21,92(sp)
    84a4:	dd001615 	stw	r20,88(sp)
    84a8:	dcc01515 	stw	r19,84(sp)
    84ac:	dc801415 	stw	r18,80(sp)
    84b0:	dc401315 	stw	r17,76(sp)
    84b4:	dc001215 	stw	r16,72(sp)
    84b8:	dfc01b15 	stw	ra,108(sp)
    84bc:	2027883a 	mov	r19,r4
    84c0:	2839883a 	mov	fp,r5
    84c4:	382f883a 	mov	r23,r7
    84c8:	d9800f15 	stw	r6,60(sp)
    84cc:	0021883a 	mov	r16,zero
    84d0:	d8000e15 	stw	zero,56(sp)
    84d4:	002d883a 	mov	r22,zero
    84d8:	0029883a 	mov	r20,zero
    84dc:	0025883a 	mov	r18,zero
    84e0:	0023883a 	mov	r17,zero
    84e4:	d8000c15 	stw	zero,48(sp)
    84e8:	d8000b15 	stw	zero,44(sp)
    84ec:	002b883a 	mov	r21,zero
    84f0:	d8c00915 	stw	r3,36(sp)
    84f4:	d8c00f17 	ldw	r3,60(sp)
    84f8:	19000003 	ldbu	r4,0(r3)
    84fc:	20803fcc 	andi	r2,r4,255
    8500:	1080201c 	xori	r2,r2,128
    8504:	10bfe004 	addi	r2,r2,-128
    8508:	10012426 	beq	r2,zero,899c <___vfprintf_internal_r+0x510>
    850c:	00c00044 	movi	r3,1
    8510:	a8c01426 	beq	r21,r3,8564 <___vfprintf_internal_r+0xd8>
    8514:	1d400216 	blt	r3,r21,8520 <___vfprintf_internal_r+0x94>
    8518:	a8000626 	beq	r21,zero,8534 <___vfprintf_internal_r+0xa8>
    851c:	00011b06 	br	898c <___vfprintf_internal_r+0x500>
    8520:	01400084 	movi	r5,2
    8524:	a9401d26 	beq	r21,r5,859c <___vfprintf_internal_r+0x110>
    8528:	014000c4 	movi	r5,3
    852c:	a9402926 	beq	r21,r5,85d4 <___vfprintf_internal_r+0x148>
    8530:	00011606 	br	898c <___vfprintf_internal_r+0x500>
    8534:	01400944 	movi	r5,37
    8538:	11410326 	beq	r2,r5,8948 <___vfprintf_internal_r+0x4bc>
    853c:	e0800117 	ldw	r2,4(fp)
    8540:	d9000005 	stb	r4,0(sp)
    8544:	e00b883a 	mov	r5,fp
    8548:	9809883a 	mov	r4,r19
    854c:	d80d883a 	mov	r6,sp
    8550:	01c00044 	movi	r7,1
    8554:	103ee83a 	callr	r2
    8558:	1000de1e 	bne	r2,zero,88d4 <___vfprintf_internal_r+0x448>
    855c:	84000044 	addi	r16,r16,1
    8560:	00010a06 	br	898c <___vfprintf_internal_r+0x500>
    8564:	01400c04 	movi	r5,48
    8568:	11410026 	beq	r2,r5,896c <___vfprintf_internal_r+0x4e0>
    856c:	01400944 	movi	r5,37
    8570:	11400a1e 	bne	r2,r5,859c <___vfprintf_internal_r+0x110>
    8574:	d8800005 	stb	r2,0(sp)
    8578:	e0800117 	ldw	r2,4(fp)
    857c:	9809883a 	mov	r4,r19
    8580:	e00b883a 	mov	r5,fp
    8584:	d80d883a 	mov	r6,sp
    8588:	a80f883a 	mov	r7,r21
    858c:	103ee83a 	callr	r2
    8590:	1000d01e 	bne	r2,zero,88d4 <___vfprintf_internal_r+0x448>
    8594:	84000044 	addi	r16,r16,1
    8598:	0000fb06 	br	8988 <___vfprintf_internal_r+0x4fc>
    859c:	217ff404 	addi	r5,r4,-48
    85a0:	29403fcc 	andi	r5,r5,255
    85a4:	00c00244 	movi	r3,9
    85a8:	19400736 	bltu	r3,r5,85c8 <___vfprintf_internal_r+0x13c>
    85ac:	00bfffc4 	movi	r2,-1
    85b0:	88800226 	beq	r17,r2,85bc <___vfprintf_internal_r+0x130>
    85b4:	8c4002a4 	muli	r17,r17,10
    85b8:	00000106 	br	85c0 <___vfprintf_internal_r+0x134>
    85bc:	0023883a 	mov	r17,zero
    85c0:	8963883a 	add	r17,r17,r5
    85c4:	0000ea06 	br	8970 <___vfprintf_internal_r+0x4e4>
    85c8:	01400b84 	movi	r5,46
    85cc:	1140ec26 	beq	r2,r5,8980 <___vfprintf_internal_r+0x4f4>
    85d0:	05400084 	movi	r21,2
    85d4:	213ff404 	addi	r4,r4,-48
    85d8:	21003fcc 	andi	r4,r4,255
    85dc:	00c00244 	movi	r3,9
    85e0:	19000736 	bltu	r3,r4,8600 <___vfprintf_internal_r+0x174>
    85e4:	00bfffc4 	movi	r2,-1
    85e8:	90800226 	beq	r18,r2,85f4 <___vfprintf_internal_r+0x168>
    85ec:	948002a4 	muli	r18,r18,10
    85f0:	00000106 	br	85f8 <___vfprintf_internal_r+0x16c>
    85f4:	0025883a 	mov	r18,zero
    85f8:	9125883a 	add	r18,r18,r4
    85fc:	0000e306 	br	898c <___vfprintf_internal_r+0x500>
    8600:	00c01b04 	movi	r3,108
    8604:	10c0dc26 	beq	r2,r3,8978 <___vfprintf_internal_r+0x4ec>
    8608:	013fffc4 	movi	r4,-1
    860c:	91000226 	beq	r18,r4,8618 <___vfprintf_internal_r+0x18c>
    8610:	d8000b15 	stw	zero,44(sp)
    8614:	00000106 	br	861c <___vfprintf_internal_r+0x190>
    8618:	04800044 	movi	r18,1
    861c:	01001a44 	movi	r4,105
    8620:	11001626 	beq	r2,r4,867c <___vfprintf_internal_r+0x1f0>
    8624:	20800916 	blt	r4,r2,864c <___vfprintf_internal_r+0x1c0>
    8628:	010018c4 	movi	r4,99
    862c:	11009226 	beq	r2,r4,8878 <___vfprintf_internal_r+0x3ec>
    8630:	01001904 	movi	r4,100
    8634:	11001126 	beq	r2,r4,867c <___vfprintf_internal_r+0x1f0>
    8638:	01001604 	movi	r4,88
    863c:	1100d21e 	bne	r2,r4,8988 <___vfprintf_internal_r+0x4fc>
    8640:	00c00044 	movi	r3,1
    8644:	d8c00e15 	stw	r3,56(sp)
    8648:	00001406 	br	869c <___vfprintf_internal_r+0x210>
    864c:	01001cc4 	movi	r4,115
    8650:	1100a226 	beq	r2,r4,88dc <___vfprintf_internal_r+0x450>
    8654:	20800416 	blt	r4,r2,8668 <___vfprintf_internal_r+0x1dc>
    8658:	01001bc4 	movi	r4,111
    865c:	1100ca1e 	bne	r2,r4,8988 <___vfprintf_internal_r+0x4fc>
    8660:	05000204 	movi	r20,8
    8664:	00000e06 	br	86a0 <___vfprintf_internal_r+0x214>
    8668:	01001d44 	movi	r4,117
    866c:	11000c26 	beq	r2,r4,86a0 <___vfprintf_internal_r+0x214>
    8670:	01001e04 	movi	r4,120
    8674:	11000926 	beq	r2,r4,869c <___vfprintf_internal_r+0x210>
    8678:	0000c306 	br	8988 <___vfprintf_internal_r+0x4fc>
    867c:	b8800104 	addi	r2,r23,4
    8680:	b0000726 	beq	r22,zero,86a0 <___vfprintf_internal_r+0x214>
    8684:	d8800d15 	stw	r2,52(sp)
    8688:	bdc00017 	ldw	r23,0(r23)
    868c:	b800080e 	bge	r23,zero,86b0 <___vfprintf_internal_r+0x224>
    8690:	05efc83a 	sub	r23,zero,r23
    8694:	02400044 	movi	r9,1
    8698:	00000606 	br	86b4 <___vfprintf_internal_r+0x228>
    869c:	05000404 	movi	r20,16
    86a0:	b8c00104 	addi	r3,r23,4
    86a4:	d8c00d15 	stw	r3,52(sp)
    86a8:	bdc00017 	ldw	r23,0(r23)
    86ac:	002d883a 	mov	r22,zero
    86b0:	0013883a 	mov	r9,zero
    86b4:	002b883a 	mov	r21,zero
    86b8:	dd4d883a 	add	r6,sp,r21
    86bc:	b8001626 	beq	r23,zero,8718 <___vfprintf_internal_r+0x28c>
    86c0:	b809883a 	mov	r4,r23
    86c4:	a00b883a 	mov	r5,r20
    86c8:	d9801015 	stw	r6,64(sp)
    86cc:	da401115 	stw	r9,68(sp)
    86d0:	0008c140 	call	8c14 <__udivsi3>
    86d4:	a089383a 	mul	r4,r20,r2
    86d8:	00c00244 	movi	r3,9
    86dc:	d9801017 	ldw	r6,64(sp)
    86e0:	b92fc83a 	sub	r23,r23,r4
    86e4:	da401117 	ldw	r9,68(sp)
    86e8:	1dc00216 	blt	r3,r23,86f4 <___vfprintf_internal_r+0x268>
    86ec:	bdc00c04 	addi	r23,r23,48
    86f0:	00000506 	br	8708 <___vfprintf_internal_r+0x27c>
    86f4:	d8c00e17 	ldw	r3,56(sp)
    86f8:	18000226 	beq	r3,zero,8704 <___vfprintf_internal_r+0x278>
    86fc:	bdc00dc4 	addi	r23,r23,55
    8700:	00000106 	br	8708 <___vfprintf_internal_r+0x27c>
    8704:	bdc015c4 	addi	r23,r23,87
    8708:	35c00005 	stb	r23,0(r6)
    870c:	ad400044 	addi	r21,r21,1
    8710:	102f883a 	mov	r23,r2
    8714:	003fe806 	br	86b8 <_gp+0xffff60bc>
    8718:	36c7c83a 	sub	r3,r6,sp
    871c:	d8c00a15 	stw	r3,40(sp)
    8720:	90c5c83a 	sub	r2,r18,r3
    8724:	302f883a 	mov	r23,r6
    8728:	00800e0e 	bge	zero,r2,8764 <___vfprintf_internal_r+0x2d8>
    872c:	302b883a 	mov	r21,r6
    8730:	3085883a 	add	r2,r6,r2
    8734:	01400c04 	movi	r5,48
    8738:	d8c00917 	ldw	r3,36(sp)
    873c:	a809883a 	mov	r4,r21
    8740:	a8c0052e 	bgeu	r21,r3,8758 <___vfprintf_internal_r+0x2cc>
    8744:	ad400044 	addi	r21,r21,1
    8748:	21400005 	stb	r5,0(r4)
    874c:	a82f883a 	mov	r23,r21
    8750:	a8bff91e 	bne	r21,r2,8738 <_gp+0xffff613c>
    8754:	00000106 	br	875c <___vfprintf_internal_r+0x2d0>
    8758:	a82f883a 	mov	r23,r21
    875c:	aeebc83a 	sub	r21,r21,sp
    8760:	dd400a15 	stw	r21,40(sp)
    8764:	d8c00a17 	ldw	r3,40(sp)
    8768:	1a51883a 	add	r8,r3,r9
    876c:	d8c00b17 	ldw	r3,44(sp)
    8770:	8a2bc83a 	sub	r21,r17,r8
    8774:	18001726 	beq	r3,zero,87d4 <___vfprintf_internal_r+0x348>
    8778:	48000a26 	beq	r9,zero,87a4 <___vfprintf_internal_r+0x318>
    877c:	00800b44 	movi	r2,45
    8780:	d8800805 	stb	r2,32(sp)
    8784:	e0800117 	ldw	r2,4(fp)
    8788:	9809883a 	mov	r4,r19
    878c:	e00b883a 	mov	r5,fp
    8790:	d9800804 	addi	r6,sp,32
    8794:	01c00044 	movi	r7,1
    8798:	103ee83a 	callr	r2
    879c:	10004d1e 	bne	r2,zero,88d4 <___vfprintf_internal_r+0x448>
    87a0:	84000044 	addi	r16,r16,1
    87a4:	0540070e 	bge	zero,r21,87c4 <___vfprintf_internal_r+0x338>
    87a8:	9809883a 	mov	r4,r19
    87ac:	e00b883a 	mov	r5,fp
    87b0:	01800c04 	movi	r6,48
    87b4:	a80f883a 	mov	r7,r21
    87b8:	00084200 	call	8420 <print_repeat>
    87bc:	1000451e 	bne	r2,zero,88d4 <___vfprintf_internal_r+0x448>
    87c0:	8561883a 	add	r16,r16,r21
    87c4:	d8c00a17 	ldw	r3,40(sp)
    87c8:	b811883a 	mov	r8,r23
    87cc:	1debc83a 	sub	r21,r3,r23
    87d0:	00002206 	br	885c <___vfprintf_internal_r+0x3d0>
    87d4:	0540090e 	bge	zero,r21,87fc <___vfprintf_internal_r+0x370>
    87d8:	9809883a 	mov	r4,r19
    87dc:	e00b883a 	mov	r5,fp
    87e0:	01800804 	movi	r6,32
    87e4:	a80f883a 	mov	r7,r21
    87e8:	da401115 	stw	r9,68(sp)
    87ec:	00084200 	call	8420 <print_repeat>
    87f0:	da401117 	ldw	r9,68(sp)
    87f4:	1000371e 	bne	r2,zero,88d4 <___vfprintf_internal_r+0x448>
    87f8:	8561883a 	add	r16,r16,r21
    87fc:	483ff126 	beq	r9,zero,87c4 <_gp+0xffff61c8>
    8800:	00800b44 	movi	r2,45
    8804:	d8800805 	stb	r2,32(sp)
    8808:	e0800117 	ldw	r2,4(fp)
    880c:	9809883a 	mov	r4,r19
    8810:	e00b883a 	mov	r5,fp
    8814:	d9800804 	addi	r6,sp,32
    8818:	01c00044 	movi	r7,1
    881c:	103ee83a 	callr	r2
    8820:	10002c1e 	bne	r2,zero,88d4 <___vfprintf_internal_r+0x448>
    8824:	84000044 	addi	r16,r16,1
    8828:	003fe606 	br	87c4 <_gp+0xffff61c8>
    882c:	423fffc4 	addi	r8,r8,-1
    8830:	40800003 	ldbu	r2,0(r8)
    8834:	9809883a 	mov	r4,r19
    8838:	e00b883a 	mov	r5,fp
    883c:	d8800805 	stb	r2,32(sp)
    8840:	e0800117 	ldw	r2,4(fp)
    8844:	d9800804 	addi	r6,sp,32
    8848:	da001015 	stw	r8,64(sp)
    884c:	01c00044 	movi	r7,1
    8850:	103ee83a 	callr	r2
    8854:	da001017 	ldw	r8,64(sp)
    8858:	10001e1e 	bne	r2,zero,88d4 <___vfprintf_internal_r+0x448>
    885c:	8205c83a 	sub	r2,r16,r8
    8860:	4549883a 	add	r4,r8,r21
    8864:	b885883a 	add	r2,r23,r2
    8868:	013ff016 	blt	zero,r4,882c <_gp+0xffff6230>
    886c:	1021883a 	mov	r16,r2
    8870:	ddc00d17 	ldw	r23,52(sp)
    8874:	00004406 	br	8988 <___vfprintf_internal_r+0x4fc>
    8878:	00800044 	movi	r2,1
    887c:	1440080e 	bge	r2,r17,88a0 <___vfprintf_internal_r+0x414>
    8880:	8d7fffc4 	addi	r21,r17,-1
    8884:	9809883a 	mov	r4,r19
    8888:	e00b883a 	mov	r5,fp
    888c:	01800804 	movi	r6,32
    8890:	a80f883a 	mov	r7,r21
    8894:	00084200 	call	8420 <print_repeat>
    8898:	10000e1e 	bne	r2,zero,88d4 <___vfprintf_internal_r+0x448>
    889c:	8561883a 	add	r16,r16,r21
    88a0:	b8800017 	ldw	r2,0(r23)
    88a4:	9809883a 	mov	r4,r19
    88a8:	e00b883a 	mov	r5,fp
    88ac:	d8800005 	stb	r2,0(sp)
    88b0:	e0800117 	ldw	r2,4(fp)
    88b4:	d80d883a 	mov	r6,sp
    88b8:	01c00044 	movi	r7,1
    88bc:	bd400104 	addi	r21,r23,4
    88c0:	103ee83a 	callr	r2
    88c4:	1000031e 	bne	r2,zero,88d4 <___vfprintf_internal_r+0x448>
    88c8:	84000044 	addi	r16,r16,1
    88cc:	a82f883a 	mov	r23,r21
    88d0:	00002d06 	br	8988 <___vfprintf_internal_r+0x4fc>
    88d4:	00bfffc4 	movi	r2,-1
    88d8:	00003106 	br	89a0 <___vfprintf_internal_r+0x514>
    88dc:	bd400017 	ldw	r21,0(r23)
    88e0:	b8c00104 	addi	r3,r23,4
    88e4:	d8c00a15 	stw	r3,40(sp)
    88e8:	a809883a 	mov	r4,r21
    88ec:	00084040 	call	8404 <strlen>
    88f0:	8893c83a 	sub	r9,r17,r2
    88f4:	102f883a 	mov	r23,r2
    88f8:	0240090e 	bge	zero,r9,8920 <___vfprintf_internal_r+0x494>
    88fc:	480f883a 	mov	r7,r9
    8900:	9809883a 	mov	r4,r19
    8904:	e00b883a 	mov	r5,fp
    8908:	01800804 	movi	r6,32
    890c:	da401115 	stw	r9,68(sp)
    8910:	00084200 	call	8420 <print_repeat>
    8914:	da401117 	ldw	r9,68(sp)
    8918:	103fee1e 	bne	r2,zero,88d4 <_gp+0xffff62d8>
    891c:	8261883a 	add	r16,r16,r9
    8920:	e0800117 	ldw	r2,4(fp)
    8924:	9809883a 	mov	r4,r19
    8928:	e00b883a 	mov	r5,fp
    892c:	a80d883a 	mov	r6,r21
    8930:	b80f883a 	mov	r7,r23
    8934:	103ee83a 	callr	r2
    8938:	103fe61e 	bne	r2,zero,88d4 <_gp+0xffff62d8>
    893c:	85e1883a 	add	r16,r16,r23
    8940:	ddc00a17 	ldw	r23,40(sp)
    8944:	00001006 	br	8988 <___vfprintf_internal_r+0x4fc>
    8948:	05800044 	movi	r22,1
    894c:	04bfffc4 	movi	r18,-1
    8950:	d8000e15 	stw	zero,56(sp)
    8954:	05000284 	movi	r20,10
    8958:	9023883a 	mov	r17,r18
    895c:	d8000c15 	stw	zero,48(sp)
    8960:	d8000b15 	stw	zero,44(sp)
    8964:	b02b883a 	mov	r21,r22
    8968:	00000806 	br	898c <___vfprintf_internal_r+0x500>
    896c:	dd400b15 	stw	r21,44(sp)
    8970:	05400084 	movi	r21,2
    8974:	00000506 	br	898c <___vfprintf_internal_r+0x500>
    8978:	00c00044 	movi	r3,1
    897c:	d8c00c15 	stw	r3,48(sp)
    8980:	054000c4 	movi	r21,3
    8984:	00000106 	br	898c <___vfprintf_internal_r+0x500>
    8988:	002b883a 	mov	r21,zero
    898c:	d8c00f17 	ldw	r3,60(sp)
    8990:	18c00044 	addi	r3,r3,1
    8994:	d8c00f15 	stw	r3,60(sp)
    8998:	003ed606 	br	84f4 <_gp+0xffff5ef8>
    899c:	8005883a 	mov	r2,r16
    89a0:	dfc01b17 	ldw	ra,108(sp)
    89a4:	df001a17 	ldw	fp,104(sp)
    89a8:	ddc01917 	ldw	r23,100(sp)
    89ac:	dd801817 	ldw	r22,96(sp)
    89b0:	dd401717 	ldw	r21,92(sp)
    89b4:	dd001617 	ldw	r20,88(sp)
    89b8:	dcc01517 	ldw	r19,84(sp)
    89bc:	dc801417 	ldw	r18,80(sp)
    89c0:	dc401317 	ldw	r17,76(sp)
    89c4:	dc001217 	ldw	r16,72(sp)
    89c8:	dec01c04 	addi	sp,sp,112
    89cc:	f800283a 	ret

000089d0 <__vfprintf_internal>:
    89d0:	2007883a 	mov	r3,r4
    89d4:	01000074 	movhi	r4,1
    89d8:	21298004 	addi	r4,r4,-23040
    89dc:	21000017 	ldw	r4,0(r4)
    89e0:	2805883a 	mov	r2,r5
    89e4:	300f883a 	mov	r7,r6
    89e8:	180b883a 	mov	r5,r3
    89ec:	100d883a 	mov	r6,r2
    89f0:	000848c1 	jmpi	848c <___vfprintf_internal_r>

000089f4 <__sfvwrite_small_dev>:
    89f4:	2880000b 	ldhu	r2,0(r5)
    89f8:	defffa04 	addi	sp,sp,-24
    89fc:	dc000015 	stw	r16,0(sp)
    8a00:	dfc00515 	stw	ra,20(sp)
    8a04:	dd000415 	stw	r20,16(sp)
    8a08:	dcc00315 	stw	r19,12(sp)
    8a0c:	dc800215 	stw	r18,8(sp)
    8a10:	dc400115 	stw	r17,4(sp)
    8a14:	1080020c 	andi	r2,r2,8
    8a18:	2821883a 	mov	r16,r5
    8a1c:	10001726 	beq	r2,zero,8a7c <__sfvwrite_small_dev+0x88>
    8a20:	2880008f 	ldh	r2,2(r5)
    8a24:	10001216 	blt	r2,zero,8a70 <__sfvwrite_small_dev+0x7c>
    8a28:	2027883a 	mov	r19,r4
    8a2c:	3025883a 	mov	r18,r6
    8a30:	3823883a 	mov	r17,r7
    8a34:	05010004 	movi	r20,1024
    8a38:	04400b0e 	bge	zero,r17,8a68 <__sfvwrite_small_dev+0x74>
    8a3c:	8140008f 	ldh	r5,2(r16)
    8a40:	880f883a 	mov	r7,r17
    8a44:	a440010e 	bge	r20,r17,8a4c <__sfvwrite_small_dev+0x58>
    8a48:	01c10004 	movi	r7,1024
    8a4c:	9809883a 	mov	r4,r19
    8a50:	900d883a 	mov	r6,r18
    8a54:	0008aa00 	call	8aa0 <_write_r>
    8a58:	0080050e 	bge	zero,r2,8a70 <__sfvwrite_small_dev+0x7c>
    8a5c:	88a3c83a 	sub	r17,r17,r2
    8a60:	90a5883a 	add	r18,r18,r2
    8a64:	003ff406 	br	8a38 <_gp+0xffff643c>
    8a68:	0005883a 	mov	r2,zero
    8a6c:	00000406 	br	8a80 <__sfvwrite_small_dev+0x8c>
    8a70:	8080000b 	ldhu	r2,0(r16)
    8a74:	10801014 	ori	r2,r2,64
    8a78:	8080000d 	sth	r2,0(r16)
    8a7c:	00bfffc4 	movi	r2,-1
    8a80:	dfc00517 	ldw	ra,20(sp)
    8a84:	dd000417 	ldw	r20,16(sp)
    8a88:	dcc00317 	ldw	r19,12(sp)
    8a8c:	dc800217 	ldw	r18,8(sp)
    8a90:	dc400117 	ldw	r17,4(sp)
    8a94:	dc000017 	ldw	r16,0(sp)
    8a98:	dec00604 	addi	sp,sp,24
    8a9c:	f800283a 	ret

00008aa0 <_write_r>:
    8aa0:	defffd04 	addi	sp,sp,-12
    8aa4:	dc000015 	stw	r16,0(sp)
    8aa8:	04000074 	movhi	r16,1
    8aac:	dc400115 	stw	r17,4(sp)
    8ab0:	842a4204 	addi	r16,r16,-22264
    8ab4:	2023883a 	mov	r17,r4
    8ab8:	2809883a 	mov	r4,r5
    8abc:	300b883a 	mov	r5,r6
    8ac0:	380d883a 	mov	r6,r7
    8ac4:	dfc00215 	stw	ra,8(sp)
    8ac8:	80000015 	stw	zero,0(r16)
    8acc:	0008dc00 	call	8dc0 <write>
    8ad0:	00ffffc4 	movi	r3,-1
    8ad4:	10c0031e 	bne	r2,r3,8ae4 <_write_r+0x44>
    8ad8:	80c00017 	ldw	r3,0(r16)
    8adc:	18000126 	beq	r3,zero,8ae4 <_write_r+0x44>
    8ae0:	88c00015 	stw	r3,0(r17)
    8ae4:	dfc00217 	ldw	ra,8(sp)
    8ae8:	dc400117 	ldw	r17,4(sp)
    8aec:	dc000017 	ldw	r16,0(sp)
    8af0:	dec00304 	addi	sp,sp,12
    8af4:	f800283a 	ret

00008af8 <udivmodsi4>:
    8af8:	2900182e 	bgeu	r5,r4,8b5c <udivmodsi4+0x64>
    8afc:	28001716 	blt	r5,zero,8b5c <udivmodsi4+0x64>
    8b00:	00800804 	movi	r2,32
    8b04:	00c00044 	movi	r3,1
    8b08:	00000206 	br	8b14 <udivmodsi4+0x1c>
    8b0c:	10001126 	beq	r2,zero,8b54 <udivmodsi4+0x5c>
    8b10:	28000516 	blt	r5,zero,8b28 <udivmodsi4+0x30>
    8b14:	294b883a 	add	r5,r5,r5
    8b18:	10bfffc4 	addi	r2,r2,-1
    8b1c:	18c7883a 	add	r3,r3,r3
    8b20:	293ffa36 	bltu	r5,r4,8b0c <_gp+0xffff6510>
    8b24:	18000b26 	beq	r3,zero,8b54 <udivmodsi4+0x5c>
    8b28:	0005883a 	mov	r2,zero
    8b2c:	21400236 	bltu	r4,r5,8b38 <udivmodsi4+0x40>
    8b30:	2149c83a 	sub	r4,r4,r5
    8b34:	10c4b03a 	or	r2,r2,r3
    8b38:	1806d07a 	srli	r3,r3,1
    8b3c:	280ad07a 	srli	r5,r5,1
    8b40:	183ffa1e 	bne	r3,zero,8b2c <_gp+0xffff6530>
    8b44:	3000011e 	bne	r6,zero,8b4c <udivmodsi4+0x54>
    8b48:	f800283a 	ret
    8b4c:	2005883a 	mov	r2,r4
    8b50:	f800283a 	ret
    8b54:	0005883a 	mov	r2,zero
    8b58:	003ffa06 	br	8b44 <_gp+0xffff6548>
    8b5c:	00c00044 	movi	r3,1
    8b60:	003ff106 	br	8b28 <_gp+0xffff652c>

00008b64 <__divsi3>:
    8b64:	defffe04 	addi	sp,sp,-8
    8b68:	dfc00115 	stw	ra,4(sp)
    8b6c:	dc000015 	stw	r16,0(sp)
    8b70:	20000b16 	blt	r4,zero,8ba0 <__divsi3+0x3c>
    8b74:	0021883a 	mov	r16,zero
    8b78:	28000c16 	blt	r5,zero,8bac <__divsi3+0x48>
    8b7c:	000d883a 	mov	r6,zero
    8b80:	0008af80 	call	8af8 <udivmodsi4>
    8b84:	0407c83a 	sub	r3,zero,r16
    8b88:	1884f03a 	xor	r2,r3,r2
    8b8c:	1405883a 	add	r2,r2,r16
    8b90:	dfc00117 	ldw	ra,4(sp)
    8b94:	dc000017 	ldw	r16,0(sp)
    8b98:	dec00204 	addi	sp,sp,8
    8b9c:	f800283a 	ret
    8ba0:	0109c83a 	sub	r4,zero,r4
    8ba4:	04000044 	movi	r16,1
    8ba8:	283ff40e 	bge	r5,zero,8b7c <_gp+0xffff6580>
    8bac:	014bc83a 	sub	r5,zero,r5
    8bb0:	8400005c 	xori	r16,r16,1
    8bb4:	003ff106 	br	8b7c <_gp+0xffff6580>

00008bb8 <__modsi3>:
    8bb8:	defffd04 	addi	sp,sp,-12
    8bbc:	dfc00215 	stw	ra,8(sp)
    8bc0:	dc400115 	stw	r17,4(sp)
    8bc4:	dc000015 	stw	r16,0(sp)
    8bc8:	20000c16 	blt	r4,zero,8bfc <__modsi3+0x44>
    8bcc:	0023883a 	mov	r17,zero
    8bd0:	0021883a 	mov	r16,zero
    8bd4:	28000d16 	blt	r5,zero,8c0c <__modsi3+0x54>
    8bd8:	01800044 	movi	r6,1
    8bdc:	0008af80 	call	8af8 <udivmodsi4>
    8be0:	1404f03a 	xor	r2,r2,r16
    8be4:	8885883a 	add	r2,r17,r2
    8be8:	dfc00217 	ldw	ra,8(sp)
    8bec:	dc400117 	ldw	r17,4(sp)
    8bf0:	dc000017 	ldw	r16,0(sp)
    8bf4:	dec00304 	addi	sp,sp,12
    8bf8:	f800283a 	ret
    8bfc:	0109c83a 	sub	r4,zero,r4
    8c00:	04400044 	movi	r17,1
    8c04:	043fffc4 	movi	r16,-1
    8c08:	283ff30e 	bge	r5,zero,8bd8 <_gp+0xffff65dc>
    8c0c:	014bc83a 	sub	r5,zero,r5
    8c10:	003ff106 	br	8bd8 <_gp+0xffff65dc>

00008c14 <__udivsi3>:
    8c14:	000d883a 	mov	r6,zero
    8c18:	0008af81 	jmpi	8af8 <udivmodsi4>

00008c1c <__umodsi3>:
    8c1c:	01800044 	movi	r6,1
    8c20:	0008af81 	jmpi	8af8 <udivmodsi4>

00008c24 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8c24:	defffc04 	addi	sp,sp,-16
    8c28:	df000315 	stw	fp,12(sp)
    8c2c:	df000304 	addi	fp,sp,12
    8c30:	e13ffd15 	stw	r4,-12(fp)
    8c34:	e17ffe15 	stw	r5,-8(fp)
    8c38:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8c3c:	e0fffe17 	ldw	r3,-8(fp)
    8c40:	e0bffd17 	ldw	r2,-12(fp)
    8c44:	18800c26 	beq	r3,r2,8c78 <alt_load_section+0x54>
  {
    while( to != end )
    8c48:	00000806 	br	8c6c <alt_load_section+0x48>
    {
      *to++ = *from++;
    8c4c:	e0bffe17 	ldw	r2,-8(fp)
    8c50:	10c00104 	addi	r3,r2,4
    8c54:	e0fffe15 	stw	r3,-8(fp)
    8c58:	e0fffd17 	ldw	r3,-12(fp)
    8c5c:	19000104 	addi	r4,r3,4
    8c60:	e13ffd15 	stw	r4,-12(fp)
    8c64:	18c00017 	ldw	r3,0(r3)
    8c68:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8c6c:	e0fffe17 	ldw	r3,-8(fp)
    8c70:	e0bfff17 	ldw	r2,-4(fp)
    8c74:	18bff51e 	bne	r3,r2,8c4c <_gp+0xffff6650>
    {
      *to++ = *from++;
    }
  }
}
    8c78:	e037883a 	mov	sp,fp
    8c7c:	df000017 	ldw	fp,0(sp)
    8c80:	dec00104 	addi	sp,sp,4
    8c84:	f800283a 	ret

00008c88 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8c88:	defffe04 	addi	sp,sp,-8
    8c8c:	dfc00115 	stw	ra,4(sp)
    8c90:	df000015 	stw	fp,0(sp)
    8c94:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8c98:	01000074 	movhi	r4,1
    8c9c:	21298a04 	addi	r4,r4,-23000
    8ca0:	01400074 	movhi	r5,1
    8ca4:	2968d204 	addi	r5,r5,-23736
    8ca8:	01800074 	movhi	r6,1
    8cac:	31a98a04 	addi	r6,r6,-23000
    8cb0:	0008c240 	call	8c24 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8cb4:	01000074 	movhi	r4,1
    8cb8:	21200804 	addi	r4,r4,-32736
    8cbc:	01400074 	movhi	r5,1
    8cc0:	29600804 	addi	r5,r5,-32736
    8cc4:	01800074 	movhi	r6,1
    8cc8:	31a06f04 	addi	r6,r6,-32324
    8ccc:	0008c240 	call	8c24 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8cd0:	01000074 	movhi	r4,1
    8cd4:	2128bc04 	addi	r4,r4,-23824
    8cd8:	01400074 	movhi	r5,1
    8cdc:	2968bc04 	addi	r5,r5,-23824
    8ce0:	01800074 	movhi	r6,1
    8ce4:	31a8d204 	addi	r6,r6,-23736
    8ce8:	0008c240 	call	8c24 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8cec:	00093c00 	call	93c0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    8cf0:	00095240 	call	9524 <alt_icache_flush_all>
}
    8cf4:	e037883a 	mov	sp,fp
    8cf8:	dfc00117 	ldw	ra,4(sp)
    8cfc:	df000017 	ldw	fp,0(sp)
    8d00:	dec00204 	addi	sp,sp,8
    8d04:	f800283a 	ret

00008d08 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8d08:	defffd04 	addi	sp,sp,-12
    8d0c:	dfc00215 	stw	ra,8(sp)
    8d10:	df000115 	stw	fp,4(sp)
    8d14:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8d18:	0009883a 	mov	r4,zero
    8d1c:	0008ef00 	call	8ef0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    8d20:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8d24:	0008f240 	call	8f24 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8d28:	01000074 	movhi	r4,1
    8d2c:	2128c704 	addi	r4,r4,-23780
    8d30:	01400074 	movhi	r5,1
    8d34:	2968c704 	addi	r5,r5,-23780
    8d38:	01800074 	movhi	r6,1
    8d3c:	31a8c704 	addi	r6,r6,-23780
    8d40:	00098e40 	call	98e4 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8d44:	d120c417 	ldw	r4,-31984(gp)
    8d48:	d0e0c517 	ldw	r3,-31980(gp)
    8d4c:	d0a0c617 	ldw	r2,-31976(gp)
    8d50:	180b883a 	mov	r5,r3
    8d54:	100d883a 	mov	r6,r2
    8d58:	000826c0 	call	826c <main>
    8d5c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    8d60:	01000044 	movi	r4,1
    8d64:	00092f00 	call	92f0 <close>
  exit (result);
    8d68:	e13fff17 	ldw	r4,-4(fp)
    8d6c:	000a0d00 	call	a0d0 <exit>

00008d70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8d70:	defffe04 	addi	sp,sp,-8
    8d74:	dfc00115 	stw	ra,4(sp)
    8d78:	df000015 	stw	fp,0(sp)
    8d7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8d80:	00800074 	movhi	r2,1
    8d84:	10a98604 	addi	r2,r2,-23016
    8d88:	10800017 	ldw	r2,0(r2)
    8d8c:	10000526 	beq	r2,zero,8da4 <alt_get_errno+0x34>
    8d90:	00800074 	movhi	r2,1
    8d94:	10a98604 	addi	r2,r2,-23016
    8d98:	10800017 	ldw	r2,0(r2)
    8d9c:	103ee83a 	callr	r2
    8da0:	00000206 	br	8dac <alt_get_errno+0x3c>
    8da4:	00800074 	movhi	r2,1
    8da8:	10aa4204 	addi	r2,r2,-22264
}
    8dac:	e037883a 	mov	sp,fp
    8db0:	dfc00117 	ldw	ra,4(sp)
    8db4:	df000017 	ldw	fp,0(sp)
    8db8:	dec00204 	addi	sp,sp,8
    8dbc:	f800283a 	ret

00008dc0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8dc0:	defff904 	addi	sp,sp,-28
    8dc4:	dfc00615 	stw	ra,24(sp)
    8dc8:	df000515 	stw	fp,20(sp)
    8dcc:	df000504 	addi	fp,sp,20
    8dd0:	e13ffd15 	stw	r4,-12(fp)
    8dd4:	e17ffe15 	stw	r5,-8(fp)
    8dd8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    8ddc:	e0bffd17 	ldw	r2,-12(fp)
    8de0:	10000616 	blt	r2,zero,8dfc <write+0x3c>
    8de4:	e0bffd17 	ldw	r2,-12(fp)
    8de8:	10c00324 	muli	r3,r2,12
    8dec:	00800074 	movhi	r2,1
    8df0:	10a91f04 	addi	r2,r2,-23428
    8df4:	1885883a 	add	r2,r3,r2
    8df8:	00000106 	br	8e00 <write+0x40>
    8dfc:	0005883a 	mov	r2,zero
    8e00:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    8e04:	e0bffb17 	ldw	r2,-20(fp)
    8e08:	10002126 	beq	r2,zero,8e90 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    8e0c:	e0bffb17 	ldw	r2,-20(fp)
    8e10:	10800217 	ldw	r2,8(r2)
    8e14:	108000cc 	andi	r2,r2,3
    8e18:	10001826 	beq	r2,zero,8e7c <write+0xbc>
    8e1c:	e0bffb17 	ldw	r2,-20(fp)
    8e20:	10800017 	ldw	r2,0(r2)
    8e24:	10800617 	ldw	r2,24(r2)
    8e28:	10001426 	beq	r2,zero,8e7c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    8e2c:	e0bffb17 	ldw	r2,-20(fp)
    8e30:	10800017 	ldw	r2,0(r2)
    8e34:	10800617 	ldw	r2,24(r2)
    8e38:	e0ffff17 	ldw	r3,-4(fp)
    8e3c:	e13ffb17 	ldw	r4,-20(fp)
    8e40:	e17ffe17 	ldw	r5,-8(fp)
    8e44:	180d883a 	mov	r6,r3
    8e48:	103ee83a 	callr	r2
    8e4c:	e0bffc15 	stw	r2,-16(fp)
    8e50:	e0bffc17 	ldw	r2,-16(fp)
    8e54:	1000070e 	bge	r2,zero,8e74 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    8e58:	0008d700 	call	8d70 <alt_get_errno>
    8e5c:	1007883a 	mov	r3,r2
    8e60:	e0bffc17 	ldw	r2,-16(fp)
    8e64:	0085c83a 	sub	r2,zero,r2
    8e68:	18800015 	stw	r2,0(r3)
        return -1;
    8e6c:	00bfffc4 	movi	r2,-1
    8e70:	00000c06 	br	8ea4 <write+0xe4>
      }
      return rval;
    8e74:	e0bffc17 	ldw	r2,-16(fp)
    8e78:	00000a06 	br	8ea4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    8e7c:	0008d700 	call	8d70 <alt_get_errno>
    8e80:	1007883a 	mov	r3,r2
    8e84:	00800344 	movi	r2,13
    8e88:	18800015 	stw	r2,0(r3)
    8e8c:	00000406 	br	8ea0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    8e90:	0008d700 	call	8d70 <alt_get_errno>
    8e94:	1007883a 	mov	r3,r2
    8e98:	00801444 	movi	r2,81
    8e9c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    8ea0:	00bfffc4 	movi	r2,-1
}
    8ea4:	e037883a 	mov	sp,fp
    8ea8:	dfc00117 	ldw	ra,4(sp)
    8eac:	df000017 	ldw	fp,0(sp)
    8eb0:	dec00204 	addi	sp,sp,8
    8eb4:	f800283a 	ret

00008eb8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    8eb8:	defffd04 	addi	sp,sp,-12
    8ebc:	dfc00215 	stw	ra,8(sp)
    8ec0:	df000115 	stw	fp,4(sp)
    8ec4:	df000104 	addi	fp,sp,4
    8ec8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    8ecc:	e13fff17 	ldw	r4,-4(fp)
    8ed0:	01400074 	movhi	r5,1
    8ed4:	29698304 	addi	r5,r5,-23028
    8ed8:	00094800 	call	9480 <alt_dev_llist_insert>
}
    8edc:	e037883a 	mov	sp,fp
    8ee0:	dfc00117 	ldw	ra,4(sp)
    8ee4:	df000017 	ldw	fp,0(sp)
    8ee8:	dec00204 	addi	sp,sp,8
    8eec:	f800283a 	ret

00008ef0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8ef0:	defffd04 	addi	sp,sp,-12
    8ef4:	dfc00215 	stw	ra,8(sp)
    8ef8:	df000115 	stw	fp,4(sp)
    8efc:	df000104 	addi	fp,sp,4
    8f00:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
    8f04:	0009dcc0 	call	9dcc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8f08:	00800044 	movi	r2,1
    8f0c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8f10:	e037883a 	mov	sp,fp
    8f14:	dfc00117 	ldw	ra,4(sp)
    8f18:	df000017 	ldw	fp,0(sp)
    8f1c:	dec00204 	addi	sp,sp,8
    8f20:	f800283a 	ret

00008f24 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8f24:	defffe04 	addi	sp,sp,-8
    8f28:	dfc00115 	stw	ra,4(sp)
    8f2c:	df000015 	stw	fp,0(sp)
    8f30:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, TIMER);
    8f34:	01000074 	movhi	r4,1
    8f38:	21040004 	addi	r4,r4,4096
    8f3c:	000b883a 	mov	r5,zero
    8f40:	01800084 	movi	r6,2
    8f44:	01c07d04 	movi	r7,500
    8f48:	00092180 	call	9218 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    8f4c:	01000074 	movhi	r4,1
    8f50:	21290a04 	addi	r4,r4,-23512
    8f54:	0008eb80 	call	8eb8 <alt_dev_reg>
}
    8f58:	e037883a 	mov	sp,fp
    8f5c:	dfc00117 	ldw	ra,4(sp)
    8f60:	df000017 	ldw	fp,0(sp)
    8f64:	dec00204 	addi	sp,sp,8
    8f68:	f800283a 	ret

00008f6c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    8f6c:	defffa04 	addi	sp,sp,-24
    8f70:	dfc00515 	stw	ra,20(sp)
    8f74:	df000415 	stw	fp,16(sp)
    8f78:	df000404 	addi	fp,sp,16
    8f7c:	e13ffd15 	stw	r4,-12(fp)
    8f80:	e17ffe15 	stw	r5,-8(fp)
    8f84:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8f88:	e0bffd17 	ldw	r2,-12(fp)
    8f8c:	10800017 	ldw	r2,0(r2)
    8f90:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    8f94:	e0bffc17 	ldw	r2,-16(fp)
    8f98:	10c00a04 	addi	r3,r2,40
    8f9c:	e0bffd17 	ldw	r2,-12(fp)
    8fa0:	10800217 	ldw	r2,8(r2)
    8fa4:	1809883a 	mov	r4,r3
    8fa8:	e17ffe17 	ldw	r5,-8(fp)
    8fac:	e1bfff17 	ldw	r6,-4(fp)
    8fb0:	100f883a 	mov	r7,r2
    8fb4:	000902c0 	call	902c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    8fb8:	e037883a 	mov	sp,fp
    8fbc:	dfc00117 	ldw	ra,4(sp)
    8fc0:	df000017 	ldw	fp,0(sp)
    8fc4:	dec00204 	addi	sp,sp,8
    8fc8:	f800283a 	ret

00008fcc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    8fcc:	defffa04 	addi	sp,sp,-24
    8fd0:	dfc00515 	stw	ra,20(sp)
    8fd4:	df000415 	stw	fp,16(sp)
    8fd8:	df000404 	addi	fp,sp,16
    8fdc:	e13ffd15 	stw	r4,-12(fp)
    8fe0:	e17ffe15 	stw	r5,-8(fp)
    8fe4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8fe8:	e0bffd17 	ldw	r2,-12(fp)
    8fec:	10800017 	ldw	r2,0(r2)
    8ff0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    8ff4:	e0bffc17 	ldw	r2,-16(fp)
    8ff8:	10c00a04 	addi	r3,r2,40
    8ffc:	e0bffd17 	ldw	r2,-12(fp)
    9000:	10800217 	ldw	r2,8(r2)
    9004:	1809883a 	mov	r4,r3
    9008:	e17ffe17 	ldw	r5,-8(fp)
    900c:	e1bfff17 	ldw	r6,-4(fp)
    9010:	100f883a 	mov	r7,r2
    9014:	00091100 	call	9110 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    9018:	e037883a 	mov	sp,fp
    901c:	dfc00117 	ldw	ra,4(sp)
    9020:	df000017 	ldw	fp,0(sp)
    9024:	dec00204 	addi	sp,sp,8
    9028:	f800283a 	ret

0000902c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    902c:	defff704 	addi	sp,sp,-36
    9030:	df000815 	stw	fp,32(sp)
    9034:	df000804 	addi	fp,sp,32
    9038:	e13ffc15 	stw	r4,-16(fp)
    903c:	e17ffd15 	stw	r5,-12(fp)
    9040:	e1bffe15 	stw	r6,-8(fp)
    9044:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9048:	e0bffc17 	ldw	r2,-16(fp)
    904c:	10800017 	ldw	r2,0(r2)
    9050:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    9054:	e0bffd17 	ldw	r2,-12(fp)
    9058:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    905c:	e0bffe17 	ldw	r2,-8(fp)
    9060:	e0fffd17 	ldw	r3,-12(fp)
    9064:	1885883a 	add	r2,r3,r2
    9068:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    906c:	00001406 	br	90c0 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    9070:	e0bff917 	ldw	r2,-28(fp)
    9074:	10800037 	ldwio	r2,0(r2)
    9078:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    907c:	e0bffb17 	ldw	r2,-20(fp)
    9080:	10a0000c 	andi	r2,r2,32768
    9084:	10000626 	beq	r2,zero,90a0 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9088:	e0bff817 	ldw	r2,-32(fp)
    908c:	10c00044 	addi	r3,r2,1
    9090:	e0fff815 	stw	r3,-32(fp)
    9094:	e0fffb17 	ldw	r3,-20(fp)
    9098:	10c00005 	stb	r3,0(r2)
    909c:	00000806 	br	90c0 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    90a0:	e0fff817 	ldw	r3,-32(fp)
    90a4:	e0bffd17 	ldw	r2,-12(fp)
    90a8:	18800126 	beq	r3,r2,90b0 <altera_avalon_jtag_uart_read+0x84>
      break;
    90ac:	00000706 	br	90cc <altera_avalon_jtag_uart_read+0xa0>
    else if(flags & O_NONBLOCK)
    90b0:	e0bfff17 	ldw	r2,-4(fp)
    90b4:	1090000c 	andi	r2,r2,16384
    90b8:	10000126 	beq	r2,zero,90c0 <altera_avalon_jtag_uart_read+0x94>
      break;   
    90bc:	00000306 	br	90cc <altera_avalon_jtag_uart_read+0xa0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    90c0:	e0fff817 	ldw	r3,-32(fp)
    90c4:	e0bffa17 	ldw	r2,-24(fp)
    90c8:	18bfe936 	bltu	r3,r2,9070 <_gp+0xffff6a74>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    90cc:	e0fff817 	ldw	r3,-32(fp)
    90d0:	e0bffd17 	ldw	r2,-12(fp)
    90d4:	18800426 	beq	r3,r2,90e8 <altera_avalon_jtag_uart_read+0xbc>
    return ptr - buffer;
    90d8:	e0fff817 	ldw	r3,-32(fp)
    90dc:	e0bffd17 	ldw	r2,-12(fp)
    90e0:	1885c83a 	sub	r2,r3,r2
    90e4:	00000606 	br	9100 <altera_avalon_jtag_uart_read+0xd4>
  else if (flags & O_NONBLOCK)
    90e8:	e0bfff17 	ldw	r2,-4(fp)
    90ec:	1090000c 	andi	r2,r2,16384
    90f0:	10000226 	beq	r2,zero,90fc <altera_avalon_jtag_uart_read+0xd0>
    return -EWOULDBLOCK;
    90f4:	00bffd44 	movi	r2,-11
    90f8:	00000106 	br	9100 <altera_avalon_jtag_uart_read+0xd4>
  else
    return -EIO;
    90fc:	00bffec4 	movi	r2,-5
}
    9100:	e037883a 	mov	sp,fp
    9104:	df000017 	ldw	fp,0(sp)
    9108:	dec00104 	addi	sp,sp,4
    910c:	f800283a 	ret

00009110 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    9110:	defff904 	addi	sp,sp,-28
    9114:	df000615 	stw	fp,24(sp)
    9118:	df000604 	addi	fp,sp,24
    911c:	e13ffc15 	stw	r4,-16(fp)
    9120:	e17ffd15 	stw	r5,-12(fp)
    9124:	e1bffe15 	stw	r6,-8(fp)
    9128:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    912c:	e0bffc17 	ldw	r2,-16(fp)
    9130:	10800017 	ldw	r2,0(r2)
    9134:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    9138:	e0bffe17 	ldw	r2,-8(fp)
    913c:	e0fffd17 	ldw	r3,-12(fp)
    9140:	1885883a 	add	r2,r3,r2
    9144:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    9148:	00000e06 	br	9184 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    914c:	e0bffa17 	ldw	r2,-24(fp)
    9150:	10800104 	addi	r2,r2,4
    9154:	10800037 	ldwio	r2,0(r2)
    9158:	10bfffec 	andhi	r2,r2,65535
    915c:	10000926 	beq	r2,zero,9184 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    9160:	e0fffa17 	ldw	r3,-24(fp)
    9164:	e0bffd17 	ldw	r2,-12(fp)
    9168:	11000044 	addi	r4,r2,1
    916c:	e13ffd15 	stw	r4,-12(fp)
    9170:	10800003 	ldbu	r2,0(r2)
    9174:	10803fcc 	andi	r2,r2,255
    9178:	1080201c 	xori	r2,r2,128
    917c:	10bfe004 	addi	r2,r2,-128
    9180:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    9184:	e0fffd17 	ldw	r3,-12(fp)
    9188:	e0bffb17 	ldw	r2,-20(fp)
    918c:	18bfef36 	bltu	r3,r2,914c <_gp+0xffff6b50>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    9190:	e0bffe17 	ldw	r2,-8(fp)
}
    9194:	e037883a 	mov	sp,fp
    9198:	df000017 	ldw	fp,0(sp)
    919c:	dec00104 	addi	sp,sp,4
    91a0:	f800283a 	ret

000091a4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    91a4:	defffa04 	addi	sp,sp,-24
    91a8:	dfc00515 	stw	ra,20(sp)
    91ac:	df000415 	stw	fp,16(sp)
    91b0:	df000404 	addi	fp,sp,16
    91b4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    91b8:	0007883a 	mov	r3,zero
    91bc:	e0bfff17 	ldw	r2,-4(fp)
    91c0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    91c4:	e0bfff17 	ldw	r2,-4(fp)
    91c8:	10800104 	addi	r2,r2,4
    91cc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    91d0:	0005303a 	rdctl	r2,status
    91d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    91d8:	e0fffd17 	ldw	r3,-12(fp)
    91dc:	00bfff84 	movi	r2,-2
    91e0:	1884703a 	and	r2,r3,r2
    91e4:	1001703a 	wrctl	status,r2
  
  return context;
    91e8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    91ec:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    91f0:	0009cc80 	call	9cc8 <alt_tick>
    91f4:	e0bffc17 	ldw	r2,-16(fp)
    91f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    91fc:	e0bffe17 	ldw	r2,-8(fp)
    9200:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    9204:	e037883a 	mov	sp,fp
    9208:	dfc00117 	ldw	ra,4(sp)
    920c:	df000017 	ldw	fp,0(sp)
    9210:	dec00204 	addi	sp,sp,8
    9214:	f800283a 	ret

00009218 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    9218:	defff804 	addi	sp,sp,-32
    921c:	dfc00715 	stw	ra,28(sp)
    9220:	df000615 	stw	fp,24(sp)
    9224:	df000604 	addi	fp,sp,24
    9228:	e13ffc15 	stw	r4,-16(fp)
    922c:	e17ffd15 	stw	r5,-12(fp)
    9230:	e1bffe15 	stw	r6,-8(fp)
    9234:	e1ffff15 	stw	r7,-4(fp)
    9238:	e0bfff17 	ldw	r2,-4(fp)
    923c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    9240:	00800074 	movhi	r2,1
    9244:	10aa4704 	addi	r2,r2,-22244
    9248:	10800017 	ldw	r2,0(r2)
    924c:	1000041e 	bne	r2,zero,9260 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    9250:	00800074 	movhi	r2,1
    9254:	10aa4704 	addi	r2,r2,-22244
    9258:	e0fffb17 	ldw	r3,-20(fp)
    925c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    9260:	e0bffc17 	ldw	r2,-16(fp)
    9264:	10800104 	addi	r2,r2,4
    9268:	00c001c4 	movi	r3,7
    926c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    9270:	d8000015 	stw	zero,0(sp)
    9274:	e13ffd17 	ldw	r4,-12(fp)
    9278:	e17ffe17 	ldw	r5,-8(fp)
    927c:	01800074 	movhi	r6,1
    9280:	31a46904 	addi	r6,r6,-28252
    9284:	e1fffc17 	ldw	r7,-16(fp)
    9288:	00095540 	call	9554 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    928c:	e037883a 	mov	sp,fp
    9290:	dfc00117 	ldw	ra,4(sp)
    9294:	df000017 	ldw	fp,0(sp)
    9298:	dec00204 	addi	sp,sp,8
    929c:	f800283a 	ret

000092a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    92a0:	defffe04 	addi	sp,sp,-8
    92a4:	dfc00115 	stw	ra,4(sp)
    92a8:	df000015 	stw	fp,0(sp)
    92ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    92b0:	00800074 	movhi	r2,1
    92b4:	10a98604 	addi	r2,r2,-23016
    92b8:	10800017 	ldw	r2,0(r2)
    92bc:	10000526 	beq	r2,zero,92d4 <alt_get_errno+0x34>
    92c0:	00800074 	movhi	r2,1
    92c4:	10a98604 	addi	r2,r2,-23016
    92c8:	10800017 	ldw	r2,0(r2)
    92cc:	103ee83a 	callr	r2
    92d0:	00000206 	br	92dc <alt_get_errno+0x3c>
    92d4:	00800074 	movhi	r2,1
    92d8:	10aa4204 	addi	r2,r2,-22264
}
    92dc:	e037883a 	mov	sp,fp
    92e0:	dfc00117 	ldw	ra,4(sp)
    92e4:	df000017 	ldw	fp,0(sp)
    92e8:	dec00204 	addi	sp,sp,8
    92ec:	f800283a 	ret

000092f0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    92f0:	defffb04 	addi	sp,sp,-20
    92f4:	dfc00415 	stw	ra,16(sp)
    92f8:	df000315 	stw	fp,12(sp)
    92fc:	df000304 	addi	fp,sp,12
    9300:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9304:	e0bfff17 	ldw	r2,-4(fp)
    9308:	10000616 	blt	r2,zero,9324 <close+0x34>
    930c:	e0bfff17 	ldw	r2,-4(fp)
    9310:	10c00324 	muli	r3,r2,12
    9314:	00800074 	movhi	r2,1
    9318:	10a91f04 	addi	r2,r2,-23428
    931c:	1885883a 	add	r2,r3,r2
    9320:	00000106 	br	9328 <close+0x38>
    9324:	0005883a 	mov	r2,zero
    9328:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    932c:	e0bffd17 	ldw	r2,-12(fp)
    9330:	10001926 	beq	r2,zero,9398 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9334:	e0bffd17 	ldw	r2,-12(fp)
    9338:	10800017 	ldw	r2,0(r2)
    933c:	10800417 	ldw	r2,16(r2)
    9340:	10000626 	beq	r2,zero,935c <close+0x6c>
    9344:	e0bffd17 	ldw	r2,-12(fp)
    9348:	10800017 	ldw	r2,0(r2)
    934c:	10800417 	ldw	r2,16(r2)
    9350:	e13ffd17 	ldw	r4,-12(fp)
    9354:	103ee83a 	callr	r2
    9358:	00000106 	br	9360 <close+0x70>
    935c:	0005883a 	mov	r2,zero
    9360:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9364:	e13fff17 	ldw	r4,-4(fp)
    9368:	0009bd00 	call	9bd0 <alt_release_fd>
    if (rval < 0)
    936c:	e0bffe17 	ldw	r2,-8(fp)
    9370:	1000070e 	bge	r2,zero,9390 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    9374:	00092a00 	call	92a0 <alt_get_errno>
    9378:	1007883a 	mov	r3,r2
    937c:	e0bffe17 	ldw	r2,-8(fp)
    9380:	0085c83a 	sub	r2,zero,r2
    9384:	18800015 	stw	r2,0(r3)
      return -1;
    9388:	00bfffc4 	movi	r2,-1
    938c:	00000706 	br	93ac <close+0xbc>
    }
    return 0;
    9390:	0005883a 	mov	r2,zero
    9394:	00000506 	br	93ac <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9398:	00092a00 	call	92a0 <alt_get_errno>
    939c:	1007883a 	mov	r3,r2
    93a0:	00801444 	movi	r2,81
    93a4:	18800015 	stw	r2,0(r3)
    return -1;
    93a8:	00bfffc4 	movi	r2,-1
  }
}
    93ac:	e037883a 	mov	sp,fp
    93b0:	dfc00117 	ldw	ra,4(sp)
    93b4:	df000017 	ldw	fp,0(sp)
    93b8:	dec00204 	addi	sp,sp,8
    93bc:	f800283a 	ret

000093c0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    93c0:	defffe04 	addi	sp,sp,-8
    93c4:	df000115 	stw	fp,4(sp)
    93c8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    93cc:	e03fff15 	stw	zero,-4(fp)
    93d0:	00000506 	br	93e8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    93d4:	e0bfff17 	ldw	r2,-4(fp)
    93d8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    93dc:	e0bfff17 	ldw	r2,-4(fp)
    93e0:	10800804 	addi	r2,r2,32
    93e4:	e0bfff15 	stw	r2,-4(fp)
    93e8:	e0bfff17 	ldw	r2,-4(fp)
    93ec:	10820030 	cmpltui	r2,r2,2048
    93f0:	103ff81e 	bne	r2,zero,93d4 <_gp+0xffff6dd8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    93f4:	e037883a 	mov	sp,fp
    93f8:	df000017 	ldw	fp,0(sp)
    93fc:	dec00104 	addi	sp,sp,4
    9400:	f800283a 	ret

00009404 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9404:	defffc04 	addi	sp,sp,-16
    9408:	df000315 	stw	fp,12(sp)
    940c:	df000304 	addi	fp,sp,12
    9410:	e13ffd15 	stw	r4,-12(fp)
    9414:	e17ffe15 	stw	r5,-8(fp)
    9418:	e1bfff15 	stw	r6,-4(fp)
  return len;
    941c:	e0bfff17 	ldw	r2,-4(fp)
}
    9420:	e037883a 	mov	sp,fp
    9424:	df000017 	ldw	fp,0(sp)
    9428:	dec00104 	addi	sp,sp,4
    942c:	f800283a 	ret

00009430 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9430:	defffe04 	addi	sp,sp,-8
    9434:	dfc00115 	stw	ra,4(sp)
    9438:	df000015 	stw	fp,0(sp)
    943c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9440:	00800074 	movhi	r2,1
    9444:	10a98604 	addi	r2,r2,-23016
    9448:	10800017 	ldw	r2,0(r2)
    944c:	10000526 	beq	r2,zero,9464 <alt_get_errno+0x34>
    9450:	00800074 	movhi	r2,1
    9454:	10a98604 	addi	r2,r2,-23016
    9458:	10800017 	ldw	r2,0(r2)
    945c:	103ee83a 	callr	r2
    9460:	00000206 	br	946c <alt_get_errno+0x3c>
    9464:	00800074 	movhi	r2,1
    9468:	10aa4204 	addi	r2,r2,-22264
}
    946c:	e037883a 	mov	sp,fp
    9470:	dfc00117 	ldw	ra,4(sp)
    9474:	df000017 	ldw	fp,0(sp)
    9478:	dec00204 	addi	sp,sp,8
    947c:	f800283a 	ret

00009480 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9480:	defffa04 	addi	sp,sp,-24
    9484:	dfc00515 	stw	ra,20(sp)
    9488:	df000415 	stw	fp,16(sp)
    948c:	df000404 	addi	fp,sp,16
    9490:	e13ffe15 	stw	r4,-8(fp)
    9494:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9498:	e0bffe17 	ldw	r2,-8(fp)
    949c:	10000326 	beq	r2,zero,94ac <alt_dev_llist_insert+0x2c>
    94a0:	e0bffe17 	ldw	r2,-8(fp)
    94a4:	10800217 	ldw	r2,8(r2)
    94a8:	1000061e 	bne	r2,zero,94c4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    94ac:	00094300 	call	9430 <alt_get_errno>
    94b0:	1007883a 	mov	r3,r2
    94b4:	00800584 	movi	r2,22
    94b8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    94bc:	00bffa84 	movi	r2,-22
    94c0:	00001306 	br	9510 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    94c4:	e0bffe17 	ldw	r2,-8(fp)
    94c8:	e0ffff17 	ldw	r3,-4(fp)
    94cc:	e0fffc15 	stw	r3,-16(fp)
    94d0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    94d4:	e0bffd17 	ldw	r2,-12(fp)
    94d8:	e0fffc17 	ldw	r3,-16(fp)
    94dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    94e0:	e0bffc17 	ldw	r2,-16(fp)
    94e4:	10c00017 	ldw	r3,0(r2)
    94e8:	e0bffd17 	ldw	r2,-12(fp)
    94ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    94f0:	e0bffc17 	ldw	r2,-16(fp)
    94f4:	10800017 	ldw	r2,0(r2)
    94f8:	e0fffd17 	ldw	r3,-12(fp)
    94fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9500:	e0bffc17 	ldw	r2,-16(fp)
    9504:	e0fffd17 	ldw	r3,-12(fp)
    9508:	10c00015 	stw	r3,0(r2)

  return 0;  
    950c:	0005883a 	mov	r2,zero
}
    9510:	e037883a 	mov	sp,fp
    9514:	dfc00117 	ldw	ra,4(sp)
    9518:	df000017 	ldw	fp,0(sp)
    951c:	dec00204 	addi	sp,sp,8
    9520:	f800283a 	ret

00009524 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9524:	defffe04 	addi	sp,sp,-8
    9528:	dfc00115 	stw	ra,4(sp)
    952c:	df000015 	stw	fp,0(sp)
    9530:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    9534:	0009883a 	mov	r4,zero
    9538:	01440004 	movi	r5,4096
    953c:	000a0440 	call	a044 <alt_icache_flush>
#endif
}
    9540:	e037883a 	mov	sp,fp
    9544:	dfc00117 	ldw	ra,4(sp)
    9548:	df000017 	ldw	fp,0(sp)
    954c:	dec00204 	addi	sp,sp,8
    9550:	f800283a 	ret

00009554 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9554:	defff904 	addi	sp,sp,-28
    9558:	dfc00615 	stw	ra,24(sp)
    955c:	df000515 	stw	fp,20(sp)
    9560:	df000504 	addi	fp,sp,20
    9564:	e13ffc15 	stw	r4,-16(fp)
    9568:	e17ffd15 	stw	r5,-12(fp)
    956c:	e1bffe15 	stw	r6,-8(fp)
    9570:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    9574:	e0800217 	ldw	r2,8(fp)
    9578:	d8800015 	stw	r2,0(sp)
    957c:	e13ffc17 	ldw	r4,-16(fp)
    9580:	e17ffd17 	ldw	r5,-12(fp)
    9584:	e1bffe17 	ldw	r6,-8(fp)
    9588:	e1ffff17 	ldw	r7,-4(fp)
    958c:	00097340 	call	9734 <alt_iic_isr_register>
}  
    9590:	e037883a 	mov	sp,fp
    9594:	dfc00117 	ldw	ra,4(sp)
    9598:	df000017 	ldw	fp,0(sp)
    959c:	dec00204 	addi	sp,sp,8
    95a0:	f800283a 	ret

000095a4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    95a4:	defff904 	addi	sp,sp,-28
    95a8:	df000615 	stw	fp,24(sp)
    95ac:	df000604 	addi	fp,sp,24
    95b0:	e13ffe15 	stw	r4,-8(fp)
    95b4:	e17fff15 	stw	r5,-4(fp)
    95b8:	e0bfff17 	ldw	r2,-4(fp)
    95bc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    95c0:	0005303a 	rdctl	r2,status
    95c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    95c8:	e0fffb17 	ldw	r3,-20(fp)
    95cc:	00bfff84 	movi	r2,-2
    95d0:	1884703a 	and	r2,r3,r2
    95d4:	1001703a 	wrctl	status,r2
  
  return context;
    95d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    95dc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    95e0:	e0bffa17 	ldw	r2,-24(fp)
    95e4:	00c00044 	movi	r3,1
    95e8:	1884983a 	sll	r2,r3,r2
    95ec:	1007883a 	mov	r3,r2
    95f0:	00800074 	movhi	r2,1
    95f4:	10aa4604 	addi	r2,r2,-22248
    95f8:	10800017 	ldw	r2,0(r2)
    95fc:	1886b03a 	or	r3,r3,r2
    9600:	00800074 	movhi	r2,1
    9604:	10aa4604 	addi	r2,r2,-22248
    9608:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    960c:	00800074 	movhi	r2,1
    9610:	10aa4604 	addi	r2,r2,-22248
    9614:	10800017 	ldw	r2,0(r2)
    9618:	100170fa 	wrctl	ienable,r2
    961c:	e0bffc17 	ldw	r2,-16(fp)
    9620:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9624:	e0bffd17 	ldw	r2,-12(fp)
    9628:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    962c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    9630:	0001883a 	nop
}
    9634:	e037883a 	mov	sp,fp
    9638:	df000017 	ldw	fp,0(sp)
    963c:	dec00104 	addi	sp,sp,4
    9640:	f800283a 	ret

00009644 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    9644:	defff904 	addi	sp,sp,-28
    9648:	df000615 	stw	fp,24(sp)
    964c:	df000604 	addi	fp,sp,24
    9650:	e13ffe15 	stw	r4,-8(fp)
    9654:	e17fff15 	stw	r5,-4(fp)
    9658:	e0bfff17 	ldw	r2,-4(fp)
    965c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9660:	0005303a 	rdctl	r2,status
    9664:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9668:	e0fffb17 	ldw	r3,-20(fp)
    966c:	00bfff84 	movi	r2,-2
    9670:	1884703a 	and	r2,r3,r2
    9674:	1001703a 	wrctl	status,r2
  
  return context;
    9678:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    967c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    9680:	e0bffa17 	ldw	r2,-24(fp)
    9684:	00c00044 	movi	r3,1
    9688:	1884983a 	sll	r2,r3,r2
    968c:	0084303a 	nor	r2,zero,r2
    9690:	1007883a 	mov	r3,r2
    9694:	00800074 	movhi	r2,1
    9698:	10aa4604 	addi	r2,r2,-22248
    969c:	10800017 	ldw	r2,0(r2)
    96a0:	1886703a 	and	r3,r3,r2
    96a4:	00800074 	movhi	r2,1
    96a8:	10aa4604 	addi	r2,r2,-22248
    96ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    96b0:	00800074 	movhi	r2,1
    96b4:	10aa4604 	addi	r2,r2,-22248
    96b8:	10800017 	ldw	r2,0(r2)
    96bc:	100170fa 	wrctl	ienable,r2
    96c0:	e0bffc17 	ldw	r2,-16(fp)
    96c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    96c8:	e0bffd17 	ldw	r2,-12(fp)
    96cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    96d0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    96d4:	0001883a 	nop
}
    96d8:	e037883a 	mov	sp,fp
    96dc:	df000017 	ldw	fp,0(sp)
    96e0:	dec00104 	addi	sp,sp,4
    96e4:	f800283a 	ret

000096e8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    96e8:	defffc04 	addi	sp,sp,-16
    96ec:	df000315 	stw	fp,12(sp)
    96f0:	df000304 	addi	fp,sp,12
    96f4:	e13ffe15 	stw	r4,-8(fp)
    96f8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    96fc:	000530fa 	rdctl	r2,ienable
    9700:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    9704:	e0bfff17 	ldw	r2,-4(fp)
    9708:	00c00044 	movi	r3,1
    970c:	1884983a 	sll	r2,r3,r2
    9710:	1007883a 	mov	r3,r2
    9714:	e0bffd17 	ldw	r2,-12(fp)
    9718:	1884703a 	and	r2,r3,r2
    971c:	1004c03a 	cmpne	r2,r2,zero
    9720:	10803fcc 	andi	r2,r2,255
}
    9724:	e037883a 	mov	sp,fp
    9728:	df000017 	ldw	fp,0(sp)
    972c:	dec00104 	addi	sp,sp,4
    9730:	f800283a 	ret

00009734 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9734:	defff504 	addi	sp,sp,-44
    9738:	dfc00a15 	stw	ra,40(sp)
    973c:	df000915 	stw	fp,36(sp)
    9740:	df000904 	addi	fp,sp,36
    9744:	e13ffc15 	stw	r4,-16(fp)
    9748:	e17ffd15 	stw	r5,-12(fp)
    974c:	e1bffe15 	stw	r6,-8(fp)
    9750:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    9754:	00bffa84 	movi	r2,-22
    9758:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    975c:	e0bffd17 	ldw	r2,-12(fp)
    9760:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    9764:	e0bff817 	ldw	r2,-32(fp)
    9768:	10800808 	cmpgei	r2,r2,32
    976c:	1000271e 	bne	r2,zero,980c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9770:	0005303a 	rdctl	r2,status
    9774:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9778:	e0fffa17 	ldw	r3,-24(fp)
    977c:	00bfff84 	movi	r2,-2
    9780:	1884703a 	and	r2,r3,r2
    9784:	1001703a 	wrctl	status,r2
  
  return context;
    9788:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    978c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    9790:	00800074 	movhi	r2,1
    9794:	10aa4904 	addi	r2,r2,-22236
    9798:	e0fff817 	ldw	r3,-32(fp)
    979c:	180690fa 	slli	r3,r3,3
    97a0:	10c5883a 	add	r2,r2,r3
    97a4:	e0fffe17 	ldw	r3,-8(fp)
    97a8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    97ac:	00800074 	movhi	r2,1
    97b0:	10aa4904 	addi	r2,r2,-22236
    97b4:	e0fff817 	ldw	r3,-32(fp)
    97b8:	180690fa 	slli	r3,r3,3
    97bc:	10c5883a 	add	r2,r2,r3
    97c0:	10800104 	addi	r2,r2,4
    97c4:	e0ffff17 	ldw	r3,-4(fp)
    97c8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    97cc:	e0bffe17 	ldw	r2,-8(fp)
    97d0:	10000526 	beq	r2,zero,97e8 <alt_iic_isr_register+0xb4>
    97d4:	e0bff817 	ldw	r2,-32(fp)
    97d8:	e13ffc17 	ldw	r4,-16(fp)
    97dc:	100b883a 	mov	r5,r2
    97e0:	00095a40 	call	95a4 <alt_ic_irq_enable>
    97e4:	00000406 	br	97f8 <alt_iic_isr_register+0xc4>
    97e8:	e0bff817 	ldw	r2,-32(fp)
    97ec:	e13ffc17 	ldw	r4,-16(fp)
    97f0:	100b883a 	mov	r5,r2
    97f4:	00096440 	call	9644 <alt_ic_irq_disable>
    97f8:	e0bff715 	stw	r2,-36(fp)
    97fc:	e0bff917 	ldw	r2,-28(fp)
    9800:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9804:	e0bffb17 	ldw	r2,-20(fp)
    9808:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    980c:	e0bff717 	ldw	r2,-36(fp)
}
    9810:	e037883a 	mov	sp,fp
    9814:	dfc00117 	ldw	ra,4(sp)
    9818:	df000017 	ldw	fp,0(sp)
    981c:	dec00204 	addi	sp,sp,8
    9820:	f800283a 	ret

00009824 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    9824:	defff904 	addi	sp,sp,-28
    9828:	dfc00615 	stw	ra,24(sp)
    982c:	df000515 	stw	fp,20(sp)
    9830:	df000504 	addi	fp,sp,20
    9834:	e13ffc15 	stw	r4,-16(fp)
    9838:	e17ffd15 	stw	r5,-12(fp)
    983c:	e1bffe15 	stw	r6,-8(fp)
    9840:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    9844:	e13ffd17 	ldw	r4,-12(fp)
    9848:	e17ffe17 	ldw	r5,-8(fp)
    984c:	e1bfff17 	ldw	r6,-4(fp)
    9850:	0009a780 	call	9a78 <open>
    9854:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    9858:	e0bffb17 	ldw	r2,-20(fp)
    985c:	10001c16 	blt	r2,zero,98d0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    9860:	00800074 	movhi	r2,1
    9864:	10a91f04 	addi	r2,r2,-23428
    9868:	e0fffb17 	ldw	r3,-20(fp)
    986c:	18c00324 	muli	r3,r3,12
    9870:	10c5883a 	add	r2,r2,r3
    9874:	10c00017 	ldw	r3,0(r2)
    9878:	e0bffc17 	ldw	r2,-16(fp)
    987c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9880:	00800074 	movhi	r2,1
    9884:	10a91f04 	addi	r2,r2,-23428
    9888:	e0fffb17 	ldw	r3,-20(fp)
    988c:	18c00324 	muli	r3,r3,12
    9890:	10c5883a 	add	r2,r2,r3
    9894:	10800104 	addi	r2,r2,4
    9898:	10c00017 	ldw	r3,0(r2)
    989c:	e0bffc17 	ldw	r2,-16(fp)
    98a0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    98a4:	00800074 	movhi	r2,1
    98a8:	10a91f04 	addi	r2,r2,-23428
    98ac:	e0fffb17 	ldw	r3,-20(fp)
    98b0:	18c00324 	muli	r3,r3,12
    98b4:	10c5883a 	add	r2,r2,r3
    98b8:	10800204 	addi	r2,r2,8
    98bc:	10c00017 	ldw	r3,0(r2)
    98c0:	e0bffc17 	ldw	r2,-16(fp)
    98c4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    98c8:	e13ffb17 	ldw	r4,-20(fp)
    98cc:	0009bd00 	call	9bd0 <alt_release_fd>
  }
} 
    98d0:	e037883a 	mov	sp,fp
    98d4:	dfc00117 	ldw	ra,4(sp)
    98d8:	df000017 	ldw	fp,0(sp)
    98dc:	dec00204 	addi	sp,sp,8
    98e0:	f800283a 	ret

000098e4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    98e4:	defffb04 	addi	sp,sp,-20
    98e8:	dfc00415 	stw	ra,16(sp)
    98ec:	df000315 	stw	fp,12(sp)
    98f0:	df000304 	addi	fp,sp,12
    98f4:	e13ffd15 	stw	r4,-12(fp)
    98f8:	e17ffe15 	stw	r5,-8(fp)
    98fc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9900:	01000074 	movhi	r4,1
    9904:	21292204 	addi	r4,r4,-23416
    9908:	e17ffd17 	ldw	r5,-12(fp)
    990c:	01800044 	movi	r6,1
    9910:	01c07fc4 	movi	r7,511
    9914:	00098240 	call	9824 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9918:	01000074 	movhi	r4,1
    991c:	21291f04 	addi	r4,r4,-23428
    9920:	e17ffe17 	ldw	r5,-8(fp)
    9924:	000d883a 	mov	r6,zero
    9928:	01c07fc4 	movi	r7,511
    992c:	00098240 	call	9824 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    9930:	01000074 	movhi	r4,1
    9934:	21292504 	addi	r4,r4,-23404
    9938:	e17fff17 	ldw	r5,-4(fp)
    993c:	01800044 	movi	r6,1
    9940:	01c07fc4 	movi	r7,511
    9944:	00098240 	call	9824 <alt_open_fd>
}  
    9948:	e037883a 	mov	sp,fp
    994c:	dfc00117 	ldw	ra,4(sp)
    9950:	df000017 	ldw	fp,0(sp)
    9954:	dec00204 	addi	sp,sp,8
    9958:	f800283a 	ret

0000995c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    995c:	defffe04 	addi	sp,sp,-8
    9960:	dfc00115 	stw	ra,4(sp)
    9964:	df000015 	stw	fp,0(sp)
    9968:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    996c:	00800074 	movhi	r2,1
    9970:	10a98604 	addi	r2,r2,-23016
    9974:	10800017 	ldw	r2,0(r2)
    9978:	10000526 	beq	r2,zero,9990 <alt_get_errno+0x34>
    997c:	00800074 	movhi	r2,1
    9980:	10a98604 	addi	r2,r2,-23016
    9984:	10800017 	ldw	r2,0(r2)
    9988:	103ee83a 	callr	r2
    998c:	00000206 	br	9998 <alt_get_errno+0x3c>
    9990:	00800074 	movhi	r2,1
    9994:	10aa4204 	addi	r2,r2,-22264
}
    9998:	e037883a 	mov	sp,fp
    999c:	dfc00117 	ldw	ra,4(sp)
    99a0:	df000017 	ldw	fp,0(sp)
    99a4:	dec00204 	addi	sp,sp,8
    99a8:	f800283a 	ret

000099ac <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    99ac:	defffd04 	addi	sp,sp,-12
    99b0:	df000215 	stw	fp,8(sp)
    99b4:	df000204 	addi	fp,sp,8
    99b8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    99bc:	e0bfff17 	ldw	r2,-4(fp)
    99c0:	10800217 	ldw	r2,8(r2)
    99c4:	10d00034 	orhi	r3,r2,16384
    99c8:	e0bfff17 	ldw	r2,-4(fp)
    99cc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    99d0:	e03ffe15 	stw	zero,-8(fp)
    99d4:	00001d06 	br	9a4c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    99d8:	00800074 	movhi	r2,1
    99dc:	10a91f04 	addi	r2,r2,-23428
    99e0:	e0fffe17 	ldw	r3,-8(fp)
    99e4:	18c00324 	muli	r3,r3,12
    99e8:	10c5883a 	add	r2,r2,r3
    99ec:	10c00017 	ldw	r3,0(r2)
    99f0:	e0bfff17 	ldw	r2,-4(fp)
    99f4:	10800017 	ldw	r2,0(r2)
    99f8:	1880111e 	bne	r3,r2,9a40 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    99fc:	00800074 	movhi	r2,1
    9a00:	10a91f04 	addi	r2,r2,-23428
    9a04:	e0fffe17 	ldw	r3,-8(fp)
    9a08:	18c00324 	muli	r3,r3,12
    9a0c:	10c5883a 	add	r2,r2,r3
    9a10:	10800204 	addi	r2,r2,8
    9a14:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9a18:	1000090e 	bge	r2,zero,9a40 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    9a1c:	e0bffe17 	ldw	r2,-8(fp)
    9a20:	10c00324 	muli	r3,r2,12
    9a24:	00800074 	movhi	r2,1
    9a28:	10a91f04 	addi	r2,r2,-23428
    9a2c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9a30:	e0bfff17 	ldw	r2,-4(fp)
    9a34:	18800226 	beq	r3,r2,9a40 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    9a38:	00bffcc4 	movi	r2,-13
    9a3c:	00000a06 	br	9a68 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9a40:	e0bffe17 	ldw	r2,-8(fp)
    9a44:	10800044 	addi	r2,r2,1
    9a48:	e0bffe15 	stw	r2,-8(fp)
    9a4c:	00800074 	movhi	r2,1
    9a50:	10a98504 	addi	r2,r2,-23020
    9a54:	10800017 	ldw	r2,0(r2)
    9a58:	1007883a 	mov	r3,r2
    9a5c:	e0bffe17 	ldw	r2,-8(fp)
    9a60:	18bfdd2e 	bgeu	r3,r2,99d8 <_gp+0xffff73dc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9a64:	0005883a 	mov	r2,zero
}
    9a68:	e037883a 	mov	sp,fp
    9a6c:	df000017 	ldw	fp,0(sp)
    9a70:	dec00104 	addi	sp,sp,4
    9a74:	f800283a 	ret

00009a78 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9a78:	defff604 	addi	sp,sp,-40
    9a7c:	dfc00915 	stw	ra,36(sp)
    9a80:	df000815 	stw	fp,32(sp)
    9a84:	df000804 	addi	fp,sp,32
    9a88:	e13ffd15 	stw	r4,-12(fp)
    9a8c:	e17ffe15 	stw	r5,-8(fp)
    9a90:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9a94:	00bfffc4 	movi	r2,-1
    9a98:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    9a9c:	00bffb44 	movi	r2,-19
    9aa0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    9aa4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9aa8:	e13ffd17 	ldw	r4,-12(fp)
    9aac:	01400074 	movhi	r5,1
    9ab0:	29698304 	addi	r5,r5,-23028
    9ab4:	0009dec0 	call	9dec <alt_find_dev>
    9ab8:	e0bff815 	stw	r2,-32(fp)
    9abc:	e0bff817 	ldw	r2,-32(fp)
    9ac0:	1000051e 	bne	r2,zero,9ad8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9ac4:	e13ffd17 	ldw	r4,-12(fp)
    9ac8:	0009e7c0 	call	9e7c <alt_find_file>
    9acc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    9ad0:	00800044 	movi	r2,1
    9ad4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9ad8:	e0bff817 	ldw	r2,-32(fp)
    9adc:	10002926 	beq	r2,zero,9b84 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    9ae0:	e13ff817 	ldw	r4,-32(fp)
    9ae4:	0009f900 	call	9f90 <alt_get_fd>
    9ae8:	e0bff915 	stw	r2,-28(fp)
    9aec:	e0bff917 	ldw	r2,-28(fp)
    9af0:	1000030e 	bge	r2,zero,9b00 <open+0x88>
    {
      status = index;
    9af4:	e0bff917 	ldw	r2,-28(fp)
    9af8:	e0bffa15 	stw	r2,-24(fp)
    9afc:	00002306 	br	9b8c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    9b00:	e0bff917 	ldw	r2,-28(fp)
    9b04:	10c00324 	muli	r3,r2,12
    9b08:	00800074 	movhi	r2,1
    9b0c:	10a91f04 	addi	r2,r2,-23428
    9b10:	1885883a 	add	r2,r3,r2
    9b14:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9b18:	e0fffe17 	ldw	r3,-8(fp)
    9b1c:	00900034 	movhi	r2,16384
    9b20:	10bfffc4 	addi	r2,r2,-1
    9b24:	1886703a 	and	r3,r3,r2
    9b28:	e0bffc17 	ldw	r2,-16(fp)
    9b2c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    9b30:	e0bffb17 	ldw	r2,-20(fp)
    9b34:	1000051e 	bne	r2,zero,9b4c <open+0xd4>
    9b38:	e13ffc17 	ldw	r4,-16(fp)
    9b3c:	00099ac0 	call	99ac <alt_file_locked>
    9b40:	e0bffa15 	stw	r2,-24(fp)
    9b44:	e0bffa17 	ldw	r2,-24(fp)
    9b48:	10001016 	blt	r2,zero,9b8c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9b4c:	e0bff817 	ldw	r2,-32(fp)
    9b50:	10800317 	ldw	r2,12(r2)
    9b54:	10000826 	beq	r2,zero,9b78 <open+0x100>
    9b58:	e0bff817 	ldw	r2,-32(fp)
    9b5c:	10800317 	ldw	r2,12(r2)
    9b60:	e13ffc17 	ldw	r4,-16(fp)
    9b64:	e17ffd17 	ldw	r5,-12(fp)
    9b68:	e1bffe17 	ldw	r6,-8(fp)
    9b6c:	e1ffff17 	ldw	r7,-4(fp)
    9b70:	103ee83a 	callr	r2
    9b74:	00000106 	br	9b7c <open+0x104>
    9b78:	0005883a 	mov	r2,zero
    9b7c:	e0bffa15 	stw	r2,-24(fp)
    9b80:	00000206 	br	9b8c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9b84:	00bffb44 	movi	r2,-19
    9b88:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9b8c:	e0bffa17 	ldw	r2,-24(fp)
    9b90:	1000090e 	bge	r2,zero,9bb8 <open+0x140>
  {
    alt_release_fd (index);  
    9b94:	e13ff917 	ldw	r4,-28(fp)
    9b98:	0009bd00 	call	9bd0 <alt_release_fd>
    ALT_ERRNO = -status;
    9b9c:	000995c0 	call	995c <alt_get_errno>
    9ba0:	1007883a 	mov	r3,r2
    9ba4:	e0bffa17 	ldw	r2,-24(fp)
    9ba8:	0085c83a 	sub	r2,zero,r2
    9bac:	18800015 	stw	r2,0(r3)
    return -1;
    9bb0:	00bfffc4 	movi	r2,-1
    9bb4:	00000106 	br	9bbc <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    9bb8:	e0bff917 	ldw	r2,-28(fp)
}
    9bbc:	e037883a 	mov	sp,fp
    9bc0:	dfc00117 	ldw	ra,4(sp)
    9bc4:	df000017 	ldw	fp,0(sp)
    9bc8:	dec00204 	addi	sp,sp,8
    9bcc:	f800283a 	ret

00009bd0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9bd0:	defffe04 	addi	sp,sp,-8
    9bd4:	df000115 	stw	fp,4(sp)
    9bd8:	df000104 	addi	fp,sp,4
    9bdc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    9be0:	e0bfff17 	ldw	r2,-4(fp)
    9be4:	108000d0 	cmplti	r2,r2,3
    9be8:	10000d1e 	bne	r2,zero,9c20 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    9bec:	00800074 	movhi	r2,1
    9bf0:	10a91f04 	addi	r2,r2,-23428
    9bf4:	e0ffff17 	ldw	r3,-4(fp)
    9bf8:	18c00324 	muli	r3,r3,12
    9bfc:	10c5883a 	add	r2,r2,r3
    9c00:	10800204 	addi	r2,r2,8
    9c04:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9c08:	00800074 	movhi	r2,1
    9c0c:	10a91f04 	addi	r2,r2,-23428
    9c10:	e0ffff17 	ldw	r3,-4(fp)
    9c14:	18c00324 	muli	r3,r3,12
    9c18:	10c5883a 	add	r2,r2,r3
    9c1c:	10000015 	stw	zero,0(r2)
  }
}
    9c20:	e037883a 	mov	sp,fp
    9c24:	df000017 	ldw	fp,0(sp)
    9c28:	dec00104 	addi	sp,sp,4
    9c2c:	f800283a 	ret

00009c30 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    9c30:	defffa04 	addi	sp,sp,-24
    9c34:	df000515 	stw	fp,20(sp)
    9c38:	df000504 	addi	fp,sp,20
    9c3c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9c40:	0005303a 	rdctl	r2,status
    9c44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9c48:	e0fffc17 	ldw	r3,-16(fp)
    9c4c:	00bfff84 	movi	r2,-2
    9c50:	1884703a 	and	r2,r3,r2
    9c54:	1001703a 	wrctl	status,r2
  
  return context;
    9c58:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    9c5c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    9c60:	e0bfff17 	ldw	r2,-4(fp)
    9c64:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    9c68:	e0bffd17 	ldw	r2,-12(fp)
    9c6c:	10800017 	ldw	r2,0(r2)
    9c70:	e0fffd17 	ldw	r3,-12(fp)
    9c74:	18c00117 	ldw	r3,4(r3)
    9c78:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    9c7c:	e0bffd17 	ldw	r2,-12(fp)
    9c80:	10800117 	ldw	r2,4(r2)
    9c84:	e0fffd17 	ldw	r3,-12(fp)
    9c88:	18c00017 	ldw	r3,0(r3)
    9c8c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    9c90:	e0bffd17 	ldw	r2,-12(fp)
    9c94:	e0fffd17 	ldw	r3,-12(fp)
    9c98:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    9c9c:	e0bffd17 	ldw	r2,-12(fp)
    9ca0:	e0fffd17 	ldw	r3,-12(fp)
    9ca4:	10c00015 	stw	r3,0(r2)
    9ca8:	e0bffb17 	ldw	r2,-20(fp)
    9cac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9cb0:	e0bffe17 	ldw	r2,-8(fp)
    9cb4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    9cb8:	e037883a 	mov	sp,fp
    9cbc:	df000017 	ldw	fp,0(sp)
    9cc0:	dec00104 	addi	sp,sp,4
    9cc4:	f800283a 	ret

00009cc8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    9cc8:	defffb04 	addi	sp,sp,-20
    9ccc:	dfc00415 	stw	ra,16(sp)
    9cd0:	df000315 	stw	fp,12(sp)
    9cd4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    9cd8:	d0a00917 	ldw	r2,-32732(gp)
    9cdc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    9ce0:	d0a0c917 	ldw	r2,-31964(gp)
    9ce4:	10800044 	addi	r2,r2,1
    9ce8:	d0a0c915 	stw	r2,-31964(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    9cec:	00002e06 	br	9da8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    9cf0:	e0bffd17 	ldw	r2,-12(fp)
    9cf4:	10800017 	ldw	r2,0(r2)
    9cf8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    9cfc:	e0bffd17 	ldw	r2,-12(fp)
    9d00:	10800403 	ldbu	r2,16(r2)
    9d04:	10803fcc 	andi	r2,r2,255
    9d08:	10000426 	beq	r2,zero,9d1c <alt_tick+0x54>
    9d0c:	d0a0c917 	ldw	r2,-31964(gp)
    9d10:	1000021e 	bne	r2,zero,9d1c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    9d14:	e0bffd17 	ldw	r2,-12(fp)
    9d18:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    9d1c:	e0bffd17 	ldw	r2,-12(fp)
    9d20:	10800217 	ldw	r2,8(r2)
    9d24:	d0e0c917 	ldw	r3,-31964(gp)
    9d28:	18801d36 	bltu	r3,r2,9da0 <alt_tick+0xd8>
    9d2c:	e0bffd17 	ldw	r2,-12(fp)
    9d30:	10800403 	ldbu	r2,16(r2)
    9d34:	10803fcc 	andi	r2,r2,255
    9d38:	1000191e 	bne	r2,zero,9da0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    9d3c:	e0bffd17 	ldw	r2,-12(fp)
    9d40:	10800317 	ldw	r2,12(r2)
    9d44:	e0fffd17 	ldw	r3,-12(fp)
    9d48:	18c00517 	ldw	r3,20(r3)
    9d4c:	1809883a 	mov	r4,r3
    9d50:	103ee83a 	callr	r2
    9d54:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    9d58:	e0bfff17 	ldw	r2,-4(fp)
    9d5c:	1000031e 	bne	r2,zero,9d6c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    9d60:	e13ffd17 	ldw	r4,-12(fp)
    9d64:	0009c300 	call	9c30 <alt_alarm_stop>
    9d68:	00000d06 	br	9da0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    9d6c:	e0bffd17 	ldw	r2,-12(fp)
    9d70:	10c00217 	ldw	r3,8(r2)
    9d74:	e0bfff17 	ldw	r2,-4(fp)
    9d78:	1887883a 	add	r3,r3,r2
    9d7c:	e0bffd17 	ldw	r2,-12(fp)
    9d80:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    9d84:	e0bffd17 	ldw	r2,-12(fp)
    9d88:	10c00217 	ldw	r3,8(r2)
    9d8c:	d0a0c917 	ldw	r2,-31964(gp)
    9d90:	1880032e 	bgeu	r3,r2,9da0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    9d94:	e0bffd17 	ldw	r2,-12(fp)
    9d98:	00c00044 	movi	r3,1
    9d9c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    9da0:	e0bffe17 	ldw	r2,-8(fp)
    9da4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    9da8:	e0fffd17 	ldw	r3,-12(fp)
    9dac:	d0a00904 	addi	r2,gp,-32732
    9db0:	18bfcf1e 	bne	r3,r2,9cf0 <_gp+0xffff76f4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    9db4:	0001883a 	nop
}
    9db8:	e037883a 	mov	sp,fp
    9dbc:	dfc00117 	ldw	ra,4(sp)
    9dc0:	df000017 	ldw	fp,0(sp)
    9dc4:	dec00204 	addi	sp,sp,8
    9dc8:	f800283a 	ret

00009dcc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    9dcc:	deffff04 	addi	sp,sp,-4
    9dd0:	df000015 	stw	fp,0(sp)
    9dd4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9dd8:	000170fa 	wrctl	ienable,zero
}
    9ddc:	e037883a 	mov	sp,fp
    9de0:	df000017 	ldw	fp,0(sp)
    9de4:	dec00104 	addi	sp,sp,4
    9de8:	f800283a 	ret

00009dec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9dec:	defffa04 	addi	sp,sp,-24
    9df0:	dfc00515 	stw	ra,20(sp)
    9df4:	df000415 	stw	fp,16(sp)
    9df8:	df000404 	addi	fp,sp,16
    9dfc:	e13ffe15 	stw	r4,-8(fp)
    9e00:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    9e04:	e0bfff17 	ldw	r2,-4(fp)
    9e08:	10800017 	ldw	r2,0(r2)
    9e0c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9e10:	e13ffe17 	ldw	r4,-8(fp)
    9e14:	00084040 	call	8404 <strlen>
    9e18:	10800044 	addi	r2,r2,1
    9e1c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9e20:	00000d06 	br	9e58 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9e24:	e0bffc17 	ldw	r2,-16(fp)
    9e28:	10c00217 	ldw	r3,8(r2)
    9e2c:	e0bffd17 	ldw	r2,-12(fp)
    9e30:	1809883a 	mov	r4,r3
    9e34:	e17ffe17 	ldw	r5,-8(fp)
    9e38:	100d883a 	mov	r6,r2
    9e3c:	000a0f00 	call	a0f0 <memcmp>
    9e40:	1000021e 	bne	r2,zero,9e4c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9e44:	e0bffc17 	ldw	r2,-16(fp)
    9e48:	00000706 	br	9e68 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    9e4c:	e0bffc17 	ldw	r2,-16(fp)
    9e50:	10800017 	ldw	r2,0(r2)
    9e54:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9e58:	e0fffc17 	ldw	r3,-16(fp)
    9e5c:	e0bfff17 	ldw	r2,-4(fp)
    9e60:	18bff01e 	bne	r3,r2,9e24 <_gp+0xffff7828>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    9e64:	0005883a 	mov	r2,zero
}
    9e68:	e037883a 	mov	sp,fp
    9e6c:	dfc00117 	ldw	ra,4(sp)
    9e70:	df000017 	ldw	fp,0(sp)
    9e74:	dec00204 	addi	sp,sp,8
    9e78:	f800283a 	ret

00009e7c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9e7c:	defffb04 	addi	sp,sp,-20
    9e80:	dfc00415 	stw	ra,16(sp)
    9e84:	df000315 	stw	fp,12(sp)
    9e88:	df000304 	addi	fp,sp,12
    9e8c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    9e90:	00800074 	movhi	r2,1
    9e94:	10a98104 	addi	r2,r2,-23036
    9e98:	10800017 	ldw	r2,0(r2)
    9e9c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9ea0:	00003106 	br	9f68 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    9ea4:	e0bffd17 	ldw	r2,-12(fp)
    9ea8:	10800217 	ldw	r2,8(r2)
    9eac:	1009883a 	mov	r4,r2
    9eb0:	00084040 	call	8404 <strlen>
    9eb4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    9eb8:	e0bffd17 	ldw	r2,-12(fp)
    9ebc:	10c00217 	ldw	r3,8(r2)
    9ec0:	e0bffe17 	ldw	r2,-8(fp)
    9ec4:	10bfffc4 	addi	r2,r2,-1
    9ec8:	1885883a 	add	r2,r3,r2
    9ecc:	10800003 	ldbu	r2,0(r2)
    9ed0:	10803fcc 	andi	r2,r2,255
    9ed4:	1080201c 	xori	r2,r2,128
    9ed8:	10bfe004 	addi	r2,r2,-128
    9edc:	10800bd8 	cmpnei	r2,r2,47
    9ee0:	1000031e 	bne	r2,zero,9ef0 <alt_find_file+0x74>
    {
      len -= 1;
    9ee4:	e0bffe17 	ldw	r2,-8(fp)
    9ee8:	10bfffc4 	addi	r2,r2,-1
    9eec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9ef0:	e0bffe17 	ldw	r2,-8(fp)
    9ef4:	e0ffff17 	ldw	r3,-4(fp)
    9ef8:	1885883a 	add	r2,r3,r2
    9efc:	10800003 	ldbu	r2,0(r2)
    9f00:	10803fcc 	andi	r2,r2,255
    9f04:	1080201c 	xori	r2,r2,128
    9f08:	10bfe004 	addi	r2,r2,-128
    9f0c:	10800be0 	cmpeqi	r2,r2,47
    9f10:	1000081e 	bne	r2,zero,9f34 <alt_find_file+0xb8>
    9f14:	e0bffe17 	ldw	r2,-8(fp)
    9f18:	e0ffff17 	ldw	r3,-4(fp)
    9f1c:	1885883a 	add	r2,r3,r2
    9f20:	10800003 	ldbu	r2,0(r2)
    9f24:	10803fcc 	andi	r2,r2,255
    9f28:	1080201c 	xori	r2,r2,128
    9f2c:	10bfe004 	addi	r2,r2,-128
    9f30:	10000a1e 	bne	r2,zero,9f5c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    9f34:	e0bffd17 	ldw	r2,-12(fp)
    9f38:	10c00217 	ldw	r3,8(r2)
    9f3c:	e0bffe17 	ldw	r2,-8(fp)
    9f40:	1809883a 	mov	r4,r3
    9f44:	e17fff17 	ldw	r5,-4(fp)
    9f48:	100d883a 	mov	r6,r2
    9f4c:	000a0f00 	call	a0f0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9f50:	1000021e 	bne	r2,zero,9f5c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    9f54:	e0bffd17 	ldw	r2,-12(fp)
    9f58:	00000806 	br	9f7c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    9f5c:	e0bffd17 	ldw	r2,-12(fp)
    9f60:	10800017 	ldw	r2,0(r2)
    9f64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9f68:	e0fffd17 	ldw	r3,-12(fp)
    9f6c:	00800074 	movhi	r2,1
    9f70:	10a98104 	addi	r2,r2,-23036
    9f74:	18bfcb1e 	bne	r3,r2,9ea4 <_gp+0xffff78a8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    9f78:	0005883a 	mov	r2,zero
}
    9f7c:	e037883a 	mov	sp,fp
    9f80:	dfc00117 	ldw	ra,4(sp)
    9f84:	df000017 	ldw	fp,0(sp)
    9f88:	dec00204 	addi	sp,sp,8
    9f8c:	f800283a 	ret

00009f90 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9f90:	defffc04 	addi	sp,sp,-16
    9f94:	df000315 	stw	fp,12(sp)
    9f98:	df000304 	addi	fp,sp,12
    9f9c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    9fa0:	00bffa04 	movi	r2,-24
    9fa4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9fa8:	e03ffd15 	stw	zero,-12(fp)
    9fac:	00001d06 	br	a024 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    9fb0:	00800074 	movhi	r2,1
    9fb4:	10a91f04 	addi	r2,r2,-23428
    9fb8:	e0fffd17 	ldw	r3,-12(fp)
    9fbc:	18c00324 	muli	r3,r3,12
    9fc0:	10c5883a 	add	r2,r2,r3
    9fc4:	10800017 	ldw	r2,0(r2)
    9fc8:	1000131e 	bne	r2,zero,a018 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    9fcc:	00800074 	movhi	r2,1
    9fd0:	10a91f04 	addi	r2,r2,-23428
    9fd4:	e0fffd17 	ldw	r3,-12(fp)
    9fd8:	18c00324 	muli	r3,r3,12
    9fdc:	10c5883a 	add	r2,r2,r3
    9fe0:	e0ffff17 	ldw	r3,-4(fp)
    9fe4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    9fe8:	00800074 	movhi	r2,1
    9fec:	10a98504 	addi	r2,r2,-23020
    9ff0:	10c00017 	ldw	r3,0(r2)
    9ff4:	e0bffd17 	ldw	r2,-12(fp)
    9ff8:	1880040e 	bge	r3,r2,a00c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    9ffc:	00800074 	movhi	r2,1
    a000:	10a98504 	addi	r2,r2,-23020
    a004:	e0fffd17 	ldw	r3,-12(fp)
    a008:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    a00c:	e0bffd17 	ldw	r2,-12(fp)
    a010:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    a014:	00000606 	br	a030 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a018:	e0bffd17 	ldw	r2,-12(fp)
    a01c:	10800044 	addi	r2,r2,1
    a020:	e0bffd15 	stw	r2,-12(fp)
    a024:	e0bffd17 	ldw	r2,-12(fp)
    a028:	10800810 	cmplti	r2,r2,32
    a02c:	103fe01e 	bne	r2,zero,9fb0 <_gp+0xffff79b4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a030:	e0bffe17 	ldw	r2,-8(fp)
}
    a034:	e037883a 	mov	sp,fp
    a038:	df000017 	ldw	fp,0(sp)
    a03c:	dec00104 	addi	sp,sp,4
    a040:	f800283a 	ret

0000a044 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    a044:	defffb04 	addi	sp,sp,-20
    a048:	df000415 	stw	fp,16(sp)
    a04c:	df000404 	addi	fp,sp,16
    a050:	e13ffe15 	stw	r4,-8(fp)
    a054:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    a058:	e0bfff17 	ldw	r2,-4(fp)
    a05c:	10840070 	cmpltui	r2,r2,4097
    a060:	1000021e 	bne	r2,zero,a06c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    a064:	00840004 	movi	r2,4096
    a068:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    a06c:	e0fffe17 	ldw	r3,-8(fp)
    a070:	e0bfff17 	ldw	r2,-4(fp)
    a074:	1885883a 	add	r2,r3,r2
    a078:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    a07c:	e0bffe17 	ldw	r2,-8(fp)
    a080:	e0bffc15 	stw	r2,-16(fp)
    a084:	00000506 	br	a09c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    a088:	e0bffc17 	ldw	r2,-16(fp)
    a08c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    a090:	e0bffc17 	ldw	r2,-16(fp)
    a094:	10800804 	addi	r2,r2,32
    a098:	e0bffc15 	stw	r2,-16(fp)
    a09c:	e0fffc17 	ldw	r3,-16(fp)
    a0a0:	e0bffd17 	ldw	r2,-12(fp)
    a0a4:	18bff836 	bltu	r3,r2,a088 <_gp+0xffff7a8c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    a0a8:	e0bffe17 	ldw	r2,-8(fp)
    a0ac:	108007cc 	andi	r2,r2,31
    a0b0:	10000226 	beq	r2,zero,a0bc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    a0b4:	e0bffc17 	ldw	r2,-16(fp)
    a0b8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    a0bc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    a0c0:	e037883a 	mov	sp,fp
    a0c4:	df000017 	ldw	fp,0(sp)
    a0c8:	dec00104 	addi	sp,sp,4
    a0cc:	f800283a 	ret

0000a0d0 <exit>:
    a0d0:	defffe04 	addi	sp,sp,-8
    a0d4:	000b883a 	mov	r5,zero
    a0d8:	dc000015 	stw	r16,0(sp)
    a0dc:	dfc00115 	stw	ra,4(sp)
    a0e0:	2021883a 	mov	r16,r4
    a0e4:	000a1200 	call	a120 <__call_exitprocs>
    a0e8:	8009883a 	mov	r4,r16
    a0ec:	000a2bc0 	call	a2bc <_exit>

0000a0f0 <memcmp>:
    a0f0:	218d883a 	add	r6,r4,r6
    a0f4:	21800826 	beq	r4,r6,a118 <memcmp+0x28>
    a0f8:	20800003 	ldbu	r2,0(r4)
    a0fc:	28c00003 	ldbu	r3,0(r5)
    a100:	10c00226 	beq	r2,r3,a10c <memcmp+0x1c>
    a104:	10c5c83a 	sub	r2,r2,r3
    a108:	f800283a 	ret
    a10c:	21000044 	addi	r4,r4,1
    a110:	29400044 	addi	r5,r5,1
    a114:	003ff706 	br	a0f4 <_gp+0xffff7af8>
    a118:	0005883a 	mov	r2,zero
    a11c:	f800283a 	ret

0000a120 <__call_exitprocs>:
    a120:	00800074 	movhi	r2,1
    a124:	10a97f04 	addi	r2,r2,-23044
    a128:	10800017 	ldw	r2,0(r2)
    a12c:	defff304 	addi	sp,sp,-52
    a130:	ddc00a15 	stw	r23,40(sp)
    a134:	d8800015 	stw	r2,0(sp)
    a138:	05c00034 	movhi	r23,0
    a13c:	10800c04 	addi	r2,r2,48
    a140:	dc800515 	stw	r18,20(sp)
    a144:	dfc00c15 	stw	ra,48(sp)
    a148:	df000b15 	stw	fp,44(sp)
    a14c:	dd800915 	stw	r22,36(sp)
    a150:	dd400815 	stw	r21,32(sp)
    a154:	dd000715 	stw	r20,28(sp)
    a158:	dcc00615 	stw	r19,24(sp)
    a15c:	dc400415 	stw	r17,16(sp)
    a160:	dc000315 	stw	r16,12(sp)
    a164:	d9000115 	stw	r4,4(sp)
    a168:	2825883a 	mov	r18,r5
    a16c:	d8800215 	stw	r2,8(sp)
    a170:	bdc00004 	addi	r23,r23,0
    a174:	d8800017 	ldw	r2,0(sp)
    a178:	dc400217 	ldw	r17,8(sp)
    a17c:	14c00c17 	ldw	r19,48(r2)
    a180:	98004226 	beq	r19,zero,a28c <__call_exitprocs+0x16c>
    a184:	9c000117 	ldw	r16,4(r19)
    a188:	00900034 	movhi	r2,16384
    a18c:	10bfffc4 	addi	r2,r2,-1
    a190:	9d002217 	ldw	r20,136(r19)
    a194:	857fffc4 	addi	r21,r16,-1
    a198:	80a1883a 	add	r16,r16,r2
    a19c:	8421883a 	add	r16,r16,r16
    a1a0:	8421883a 	add	r16,r16,r16
    a1a4:	a42d883a 	add	r22,r20,r16
    a1a8:	84000204 	addi	r16,r16,8
    a1ac:	9c21883a 	add	r16,r19,r16
    a1b0:	a8002616 	blt	r21,zero,a24c <__call_exitprocs+0x12c>
    a1b4:	90000326 	beq	r18,zero,a1c4 <__call_exitprocs+0xa4>
    a1b8:	a0002026 	beq	r20,zero,a23c <__call_exitprocs+0x11c>
    a1bc:	b1002017 	ldw	r4,128(r22)
    a1c0:	24801e1e 	bne	r4,r18,a23c <__call_exitprocs+0x11c>
    a1c4:	99000117 	ldw	r4,4(r19)
    a1c8:	82000017 	ldw	r8,0(r16)
    a1cc:	213fffc4 	addi	r4,r4,-1
    a1d0:	a900021e 	bne	r21,r4,a1dc <__call_exitprocs+0xbc>
    a1d4:	9d400115 	stw	r21,4(r19)
    a1d8:	00000106 	br	a1e0 <__call_exitprocs+0xc0>
    a1dc:	80000015 	stw	zero,0(r16)
    a1e0:	40001626 	beq	r8,zero,a23c <__call_exitprocs+0x11c>
    a1e4:	9f000117 	ldw	fp,4(r19)
    a1e8:	a0000526 	beq	r20,zero,a200 <__call_exitprocs+0xe0>
    a1ec:	00800044 	movi	r2,1
    a1f0:	1552983a 	sll	r9,r2,r21
    a1f4:	a1404017 	ldw	r5,256(r20)
    a1f8:	494a703a 	and	r5,r9,r5
    a1fc:	2800021e 	bne	r5,zero,a208 <__call_exitprocs+0xe8>
    a200:	403ee83a 	callr	r8
    a204:	00000906 	br	a22c <__call_exitprocs+0x10c>
    a208:	a1004117 	ldw	r4,260(r20)
    a20c:	4908703a 	and	r4,r9,r4
    a210:	2000041e 	bne	r4,zero,a224 <__call_exitprocs+0x104>
    a214:	d9000117 	ldw	r4,4(sp)
    a218:	b1400017 	ldw	r5,0(r22)
    a21c:	403ee83a 	callr	r8
    a220:	00000206 	br	a22c <__call_exitprocs+0x10c>
    a224:	b1000017 	ldw	r4,0(r22)
    a228:	403ee83a 	callr	r8
    a22c:	99000117 	ldw	r4,4(r19)
    a230:	e13fd01e 	bne	fp,r4,a174 <_gp+0xffff7b78>
    a234:	89000017 	ldw	r4,0(r17)
    a238:	24ffce1e 	bne	r4,r19,a174 <_gp+0xffff7b78>
    a23c:	ad7fffc4 	addi	r21,r21,-1
    a240:	b5bfff04 	addi	r22,r22,-4
    a244:	843fff04 	addi	r16,r16,-4
    a248:	003fd906 	br	a1b0 <_gp+0xffff7bb4>
    a24c:	b8000f26 	beq	r23,zero,a28c <__call_exitprocs+0x16c>
    a250:	99000117 	ldw	r4,4(r19)
    a254:	20000a1e 	bne	r4,zero,a280 <__call_exitprocs+0x160>
    a258:	99000017 	ldw	r4,0(r19)
    a25c:	20000826 	beq	r4,zero,a280 <__call_exitprocs+0x160>
    a260:	89000015 	stw	r4,0(r17)
    a264:	a0000226 	beq	r20,zero,a270 <__call_exitprocs+0x150>
    a268:	a009883a 	mov	r4,r20
    a26c:	00000000 	call	0 <__alt_mem_mem-0x8000>
    a270:	9809883a 	mov	r4,r19
    a274:	00000000 	call	0 <__alt_mem_mem-0x8000>
    a278:	8cc00017 	ldw	r19,0(r17)
    a27c:	003fc006 	br	a180 <_gp+0xffff7b84>
    a280:	9823883a 	mov	r17,r19
    a284:	9cc00017 	ldw	r19,0(r19)
    a288:	003fbd06 	br	a180 <_gp+0xffff7b84>
    a28c:	dfc00c17 	ldw	ra,48(sp)
    a290:	df000b17 	ldw	fp,44(sp)
    a294:	ddc00a17 	ldw	r23,40(sp)
    a298:	dd800917 	ldw	r22,36(sp)
    a29c:	dd400817 	ldw	r21,32(sp)
    a2a0:	dd000717 	ldw	r20,28(sp)
    a2a4:	dcc00617 	ldw	r19,24(sp)
    a2a8:	dc800517 	ldw	r18,20(sp)
    a2ac:	dc400417 	ldw	r17,16(sp)
    a2b0:	dc000317 	ldw	r16,12(sp)
    a2b4:	dec00d04 	addi	sp,sp,52
    a2b8:	f800283a 	ret

0000a2bc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a2bc:	defffd04 	addi	sp,sp,-12
    a2c0:	df000215 	stw	fp,8(sp)
    a2c4:	df000204 	addi	fp,sp,8
    a2c8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    a2cc:	0001883a 	nop
    a2d0:	e0bfff17 	ldw	r2,-4(fp)
    a2d4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    a2d8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a2dc:	10000226 	beq	r2,zero,a2e8 <_exit+0x2c>
    ALT_SIM_FAIL();
    a2e0:	002af070 	cmpltui	zero,zero,43969
    a2e4:	00000106 	br	a2ec <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    a2e8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a2ec:	003fff06 	br	a2ec <_gp+0xffff7cf0>
